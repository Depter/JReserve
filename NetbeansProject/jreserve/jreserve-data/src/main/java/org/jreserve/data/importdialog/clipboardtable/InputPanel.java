package org.jreserve.data.importdialog.clipboardtable;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jreserve.data.DataImport;
import org.jreserve.data.DataImport.ImportType;
import org.jreserve.data.entities.ProjectDataType;
import org.jreserve.project.entities.Project;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 */
@Messages({
    "LBL.VisualPanel.project=Project:",
    "LBL.VisualPanel.DataType=Data type:",
    "LBL.VisualPanel.DateFormat=Date format:",
    "LBL.VisualPanel.Cummulated=Cummulated:",
    "LBL.VisualPanel.ImportMethod=Import method:"
})
public class InputPanel extends JPanel implements ActionListener, DocumentListener {
    
    public final static String DATA_TYPE_SELECT_ACTION = "DATA_TYPE_SELECTED";
    public final static String CUMMULATED_ACTION = "CUMMULATED";
    public final static String DATE_FORMAT_ACTION = "DATE_FORMAT";
    public final static String IMPORT_METHOD_ACTION = "IMPORT_METHOD";
    public final static String DEFAULT_DATE_FORMAT = "yyyy-MM-dd";
    
    private final Date now = new Date();
    private DateFormat dateFormat = new SimpleDateFormat(DEFAULT_DATE_FORMAT);
    private ProjectDataTypeComboModel comboModel = new ProjectDataTypeComboModel();

    private List<ActionListener> listeners = new ArrayList<ActionListener>();
    
    public InputPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectNameLabel = new javax.swing.JLabel();
        importMethodLabel = new javax.swing.JLabel();
        importTypeCombo = new javax.swing.JComboBox(DataImport.ImportType.values());
        cummulatedCheck = new javax.swing.JCheckBox();
        cummulateLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        dateFormatText = new javax.swing.JTextField();
        dateFormatLabel = new javax.swing.JLabel();
        dataTypeCombo = new javax.swing.JComboBox();
        dataTypeLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();

        projectNameLabel.setText("Project name");

        importMethodLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        importMethodLabel.setLabelFor(importTypeCombo);
        importMethodLabel.setText(Bundle.LBL_VisualPanel_ImportMethod());

        importTypeCombo.setRenderer(new ImportTypeListRenderer());
        importTypeCombo.addActionListener(this);

        cummulatedCheck.setText(null);
        cummulatedCheck.setActionCommand(CUMMULATED_ACTION);
        cummulatedCheck.addActionListener(this);

        cummulateLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cummulateLabel.setLabelFor(cummulatedCheck);
        cummulateLabel.setText(Bundle.LBL_VisualPanel_Cummulated());

        dateLabel.setText(dateFormat.format(now));

        dateFormatText.setText(DEFAULT_DATE_FORMAT);
        dateFormatText.getDocument().addDocumentListener(this);

        dateFormatLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        dateFormatLabel.setLabelFor(dateFormatLabel);
        dateFormatLabel.setText(Bundle.LBL_VisualPanel_DateFormat());

        dataTypeCombo.setModel(comboModel);
        dataTypeCombo.setActionCommand(DATA_TYPE_SELECT_ACTION);
        dataTypeCombo.addActionListener(this);
        dataTypeCombo.setRenderer(new ProjectDataTypeComboRenderer());

        dataTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        dataTypeLabel.setLabelFor(dataTypeCombo);
        dataTypeLabel.setText(Bundle.LBL_VisualPanel_DataType());

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        nameLabel.setLabelFor(projectNameLabel);
        nameLabel.setText(Bundle.LBL_VisualPanel_project());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dataTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateFormatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cummulateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(importMethodLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(projectNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dataTypeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateFormatText)
                    .addComponent(cummulatedCheck, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(importTypeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(projectNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataTypeLabel)
                    .addComponent(dataTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateFormatLabel)
                    .addComponent(dateFormatText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cummulateLabel)
                    .addComponent(cummulatedCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importMethodLabel)
                    .addComponent(importTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cummulateLabel;
    private javax.swing.JCheckBox cummulatedCheck;
    private javax.swing.JComboBox dataTypeCombo;
    private javax.swing.JLabel dataTypeLabel;
    private javax.swing.JLabel dateFormatLabel;
    private javax.swing.JTextField dateFormatText;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel importMethodLabel;
    private javax.swing.JComboBox importTypeCombo;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel projectNameLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();
        if(DATA_TYPE_SELECT_ACTION.equals(command))
            checkTriangleDataType();
        fireActionParformed(command);
    }

    private void checkTriangleDataType() {
        ProjectDataType type = getDataType();
        boolean enabled = type==null || type.isTriangle();
        cummulatedCheck.setEnabled(enabled);
    }
    
    private void fireActionParformed(String command) {
        ActionEvent e = createActionEvent(command);
        for(ActionListener listener : new ArrayList<ActionListener>(listeners))
            listener.actionPerformed(e);
    
    }
    
    private ActionEvent createActionEvent(String command) {
        return new ActionEvent(this, ActionEvent.ACTION_FIRST, command);
    }
    
    @Override
    public void insertUpdate(DocumentEvent e) {
        dateFormatChanged();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        dateFormatChanged();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
    }
    
    private void dateFormatChanged() {
        String format = dateFormatText.getText();
        if(isValidFormat(format))
            dateLabel.setText(dateFormat.format(now));
        fireActionParformed(DATE_FORMAT_ACTION);
    }
    
    private boolean isValidFormat(String format) {
        try {
            dateFormat = new SimpleDateFormat(format);
            return true;
        } catch (RuntimeException ex) {
            return false;
        }
    }    
    
    public void setProject(Project project) {
        String name = project==null? null : project.getName();
        projectNameLabel.setText(name);
        comboModel.setProject(project);
    }
    
    public ProjectDataType getDataType() {
        return (ProjectDataType) dataTypeCombo.getSelectedItem();
    }
    
    public String getDateFormat() {
        return dateFormatText.getText();
    }
    
    public boolean isCummulated() {
        return cummulatedCheck.isEnabled() && cummulatedCheck.isSelected();
    }
    
    public ImportType getImportType() {
        return (ImportType) importTypeCombo.getSelectedItem();
    }
    
    public void addActionListener(ActionListener listener) {
        if(!listeners.contains(listener))
            listeners.add(listener);
    }
    
    public void removeActionListener(ActionListener listener) {
        listeners.remove(listener);
    }
}
