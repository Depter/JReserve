package org.jreserve.data.importdialog.clipboardtable;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableColumnModel;
import org.jreserve.data.entities.ProjectDataType;
import org.jreserve.project.entities.Project;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 */
@Messages({
    "LBL.VisualPanel.name=Import table",
    "LBL.VisualPanel.project=Project:",
    "LBL.VisualPanel.DataType=Data type:",
    "LBL.VisualPanel.DateFormat=Date format:",
    "LBL.VisualPanel.Cummulated=Cummulated:",
    "LBL.VisualPanel.Paste=Paste"
})
class VisualPanel extends JPanel implements ActionListener, DocumentListener {
    
    private final static String DATA_TYPE_SELECT_ACTION = "DATA_TYPE_SELECTED";
    private final static String PASTE_ACTION = "PASTE";
    private final static String CUMMULATED_ACTION = "CUMMULATED";
    private final static String DEFAULT_DATE_FORMAT = "yyyy-MM-dd";
    
    private final Date now = new Date();
    private DateFormat dateFormat = new SimpleDateFormat(DEFAULT_DATE_FORMAT);
    private ProjectDataTypeComboModel comboModel = new ProjectDataTypeComboModel();
    private DataTableModel tableModel = new DataTableModel();
    private DataValueRenderer valueRenderer = new DataValueRenderer();
    private DateRenderer dateRenderer = new DateRenderer(DEFAULT_DATE_FORMAT);
    
    private final List<ChangeListener> changeListeners = new ArrayList<ChangeListener>();
    
    VisualPanel() {
        initComponents();
        setName(Bundle.LBL_VisualPanel_name());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        projectNameLabel = new javax.swing.JLabel();
        dataTypeCombo = new javax.swing.JComboBox();
        dateFormatText = new javax.swing.JTextField();
        cummulatedCheck = new javax.swing.JCheckBox();
        dateLabel = new javax.swing.JLabel();
        tableScroll = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        nameLabel.setText(Bundle.LBL_VisualPanel_project());

        jLabel1.setText(Bundle.LBL_VisualPanel_DataType());

        jLabel2.setText(Bundle.LBL_VisualPanel_DateFormat());

        jLabel3.setText(Bundle.LBL_VisualPanel_Cummulated());

        projectNameLabel.setText(org.openide.util.NbBundle.getMessage(VisualPanel.class, "VisualPanel.projectNameLabel.text")); // NOI18N

        dataTypeCombo.setModel(comboModel);
        dataTypeCombo.setActionCommand(DATA_TYPE_SELECT_ACTION);
        dataTypeCombo.addActionListener(this);
        dataTypeCombo.setRenderer(new ProjectDataTypeComboRenderer());

        dateFormatText.setText(DEFAULT_DATE_FORMAT);
        dateFormatText.getDocument().addDocumentListener(this);

        cummulatedCheck.setText(null);
        cummulatedCheck.setActionCommand(CUMMULATED_ACTION);
        cummulatedCheck.addActionListener(this);

        dateLabel.setText(dateFormat.format(now));

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dataTypeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateFormatText, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addComponent(cummulatedCheck)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(projectNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dataTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dateFormatText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(cummulatedCheck))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        add(inputPanel, java.awt.BorderLayout.PAGE_START);

        tableScroll.setPreferredSize(new java.awt.Dimension(400, 300));

        dataTable.setModel(tableModel);
        dataTable.setFillsViewportHeight(true);
        dataTable.addMouseListener(new PopUpMenu());
        tableScroll.setViewportView(dataTable);

        add(tableScroll, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cummulatedCheck;
    private javax.swing.JTable dataTable;
    private javax.swing.JComboBox dataTypeCombo;
    private javax.swing.JTextField dateFormatText;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JScrollPane tableScroll;
    // End of variables declaration//GEN-END:variables
    
    void addChangeListeners(ChangeListener listener) {
        synchronized(changeListeners) {
            if(!changeListeners.contains(listener))
                changeListeners.add(listener);
        }
    }
    
    public void removeChangeListener(ChangeListener listener) {
        synchronized(changeListeners) {
            changeListeners.remove(listener);
        }
    }
    
    private void fireChangeEvent() {
        List<ChangeListener> ls;
        synchronized(changeListeners) {
            ls = new ArrayList<ChangeListener>(changeListeners);
        }
        ChangeEvent evt = new ChangeEvent(this);
        for(ChangeListener listener : ls)
            listener.stateChanged(evt);
    }
    
    ProjectDataType getDataType() {
        return (ProjectDataType) dataTypeCombo.getSelectedItem();
    }
    
    String getDateFormat() {
        return dateFormatText.getText();
    }
    
    boolean isCummulated() {
        return cummulatedCheck.isEnabled() && cummulatedCheck.isSelected();
    }
    
    void setProject(Project project) {
        String name = project==null? null : project.getName();
        projectNameLabel.setText(name);
        comboModel.setProject(project);
        fireChangeEvent();
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        dateFormatChanged();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        dateFormatChanged();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
    }
    
    private void dateFormatChanged() {
        String format = dateFormatText.getText();
        if(isValidFormat(format)) {
            dateLabel.setText(dateFormat.format(now));
            dateRenderer.setDateFormat(format);
            tableModel.rerenderData();
        }
        fireChangeEvent();
    }
    
    private boolean isValidFormat(String format) {
        try {
            dateFormat = new SimpleDateFormat(format);
            return true;
        } catch (RuntimeException ex) {
            return false;
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String action = e.getActionCommand();
        if(DATA_TYPE_SELECT_ACTION.equals(action)) {
            setDataType();
        } else if(PASTE_ACTION.equals(action)) {
            pasteFromClipboard();
        } else if(CUMMULATED_ACTION.equals(action)) {
            fireChangeEvent();
        }
    }
    
    private void setDataType() {
        ProjectDataType type = (ProjectDataType) dataTypeCombo.getSelectedItem();
        tableModel.setDataType(type);
        setCummulated(type);
        setTableRenderers(type);
        fireChangeEvent();
    }
    
    private void setCummulated(ProjectDataType dataType) {
        if(dataType == null)
            return;
        cummulatedCheck.setEnabled(dataType.isTriangle());
    }
    
    private void setTableRenderers(ProjectDataType dataType) {
        if(dataType == null)
            return;
        TableColumnModel columnModel = dataTable.getColumnModel();
        if(dataType.isTriangle())
            setTriangleRenderers(columnModel);
        else
            setVectorRenderers(columnModel);
    }
    
    private void setTriangleRenderers(TableColumnModel columnModel) {
        columnModel.getColumn(0).setCellRenderer(dateRenderer);
        columnModel.getColumn(1).setCellRenderer(dateRenderer);
        columnModel.getColumn(2).setCellRenderer(valueRenderer);
    }
    
    private void setVectorRenderers(TableColumnModel columnModel) {
        columnModel.getColumn(0).setCellRenderer(dateRenderer);
        columnModel.getColumn(1).setCellRenderer(valueRenderer);
    }
    
    private void pasteFromClipboard() {
        String data = getDataFromClipboard();
        if(data != null)
            tableModel.setClipboardData(data);
        fireChangeEvent(); 
    }

    private String getDataFromClipboard() {
        try {
            Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
            return (String) cb.getData(DataFlavor.stringFlavor); 
        } catch (Exception ex) {
            return null;
        }
    }
    
    private boolean canPasteData() {
        return dataTypeCombo.getSelectedItem() != null;
    }
    
    private class PopUpMenu extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent e) {
            if(e.isPopupTrigger())
                popUp(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            if(e.isPopupTrigger())
                popUp(e);
        }
        
        private void popUp(MouseEvent evt) {
            if(!canPasteData())
                return;
            JPopupMenu popUp = buildMenu();
            popUp.show(dataTable, evt.getX(), evt.getY());
        }
        
        private JPopupMenu buildMenu() {
            JPopupMenu menu = new JPopupMenu();
            menu.add(getPasteItem());
            return menu;
        }
        
        private JMenuItem getPasteItem() {
            JMenuItem item = new JMenuItem(Bundle.LBL_VisualPanel_Paste());
            item.setActionCommand(PASTE_ACTION);
            item.addActionListener(VisualPanel.this);
            return item;
        }
    }
    
}
