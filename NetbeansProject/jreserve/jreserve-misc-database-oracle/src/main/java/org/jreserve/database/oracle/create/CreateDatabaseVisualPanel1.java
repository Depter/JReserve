package org.jreserve.database.oracle.create;

import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jreserve.database.AbstractDatabase;
import org.jreserve.database.DatabaseUtil;
import org.jreserve.resources.images.ImageResources;
import org.jreserve.resources.textfieldfilters.IntegerFilter;
import org.openide.util.NbBundle.Messages;

@Messages({
    "CTL_stepOne=Define connection",
    "CTL_server=Server:",
    "CTL_port=Port:",
    "CTL_sid=SID:",
    "ERR_serverEmpty=Field 'Server' is empty!",
    "ERR_portEmpty=Field 'Port' is empty!",
    "ERR_sidEmpty=Field 'SID' is empty!",
    "ERR_dbNameAlreadyExists=Database with name \"{0}\" is already exists!",
    "ERR_dbNameAlreadyExistsNotOpened=Database with name \"{0}\" is already exists, but it is not opened!"
})
final class CreateDatabaseVisualPanel1 extends JPanel implements DocumentListener {
    
    private CreateDatabaseWizardPanel1 descriptor;
    
    public CreateDatabaseVisualPanel1(CreateDatabaseWizardPanel1 descriptor) {
        this.descriptor = descriptor;
        initComponents();
        checkInput();
    }
    
    @Override
    public String getName() {
        return Bundle.CTL_stepOne();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverLabel = new javax.swing.JLabel();
        serverText = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        portText = new javax.swing.JTextField();
        sidLabel = new javax.swing.JLabel();
        sidText = new javax.swing.JTextField();
        errorLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(serverLabel, Bundle.CTL_server());

        serverText.setText(org.openide.util.NbBundle.getMessage(CreateDatabaseVisualPanel1.class, "CreateDatabaseVisualPanel1.serverText.text")); // NOI18N
        serverText.getDocument().addDocumentListener(this);

        org.openide.awt.Mnemonics.setLocalizedText(portLabel, Bundle.CTL_port());

        portText.setText(org.openide.util.NbBundle.getMessage(CreateDatabaseVisualPanel1.class, "CreateDatabaseVisualPanel1.portText.text")); // NOI18N
        portText.setDocument(new IntegerFilter());
        portText.getDocument().addDocumentListener(this);

        org.openide.awt.Mnemonics.setLocalizedText(sidLabel, Bundle.CTL_sid());

        sidText.setText(org.openide.util.NbBundle.getMessage(CreateDatabaseVisualPanel1.class, "CreateDatabaseVisualPanel1.sidText.text")); // NOI18N
        sidText.getDocument().addDocumentListener(this);

        org.openide.awt.Mnemonics.setLocalizedText(errorLabel, org.openide.util.NbBundle.getMessage(CreateDatabaseVisualPanel1.class, "CreateDatabaseVisualPanel1.errorLabel.text")); // NOI18N
        errorLabel.setIcon(ImageResources.error());
        errorLabel.setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(serverLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(portLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sidLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(serverText)
                            .addComponent(portText)
                            .addComponent(sidText, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)))
                    .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverLabel)
                    .addComponent(serverText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel)
                    .addComponent(portText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sidLabel)
                    .addComponent(sidText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 234, Short.MAX_VALUE)
                .addComponent(errorLabel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portText;
    private javax.swing.JLabel serverLabel;
    private javax.swing.JTextField serverText;
    private javax.swing.JLabel sidLabel;
    private javax.swing.JTextField sidText;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent e) {
        checkInput();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        checkInput();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        checkInput();
    }
    
    private void checkInput() {
        errorLabel.setText("");
        boolean isValid = checkFields();
        errorLabel.setVisible(!isValid);
        descriptor.setValid(isValid);
    }

    private boolean checkFields() {
        return checkServerText() &&
               checkPortText() &&
               checkSidText();
    }
    
    private boolean checkServerText() {
        if(escapeTextFromField(serverText).length() > 0)
            return true;
        errorLabel.setText(Bundle.ERR_serverEmpty());
        return false;
    }
    
    private String escapeTextFromField(JTextField textField) {
        String str = textField.getText();
        if(str == null)
            return "";
        return str.trim();
    }
    
    private boolean checkPortText() {
        if(escapeTextFromField(portText).length() > 0)
            return true;
        errorLabel.setText(Bundle.ERR_portEmpty());
        return false;
    }
    
    private boolean checkSidText() {
        String sid = escapeTextFromField(sidText);
        if(sid.length() != 0)
            return checkDbName(sid);
        errorLabel.setText(Bundle.ERR_sidEmpty());
        return false;
    }
    
    private boolean checkDbName(String sid) {
        AbstractDatabase db = DatabaseUtil.getDatabaseByName(sid);
        if(db == null)
            return true;
        setNameExistsText(db);
        return false;
    }
    
    private void setNameExistsText(AbstractDatabase db) {
        if(db.isOpened()) {
            errorLabel.setText(Bundle.ERR_dbNameAlreadyExists(db.getShortName()));
        } else {
            errorLabel.setText(Bundle.ERR_dbNameAlreadyExistsNotOpened(db.getShortName()));
        }
    }
    
    
    void setServer(String server) {
        serverText.setText(server);
    }
    
    String getServer() {
        String str = escapeTextFromField(serverText);
        return str.length()==0? null : str;
    }
    
    int getPort() {
        String str = escapeTextFromField(portText);
        return str.length()==0? 0 : Integer.parseInt(str);
    }
    
    void setPort(int port) {
        serverText.setText(""+port);
    }
    
    String getSid() {
        String str = escapeTextFromField(sidText);
        return str.length()==0? null : str;
    }
    
    void setSid(String sid) {
        sidText.setText(sid);
    }
}
