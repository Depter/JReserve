package org.jreserve.audit.global;

import org.jreserve.audit.AuditedEntity;
import org.jreserve.persistence.PersistenceUtil;
import org.jreserve.persistence.SessionFactory;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

@ConvertAsProperties(
    dtd = "-//org.jreserve.audit.global//AuditedEntityExplorer//EN",
    autostore = false
)
@TopComponent.Description(
    preferredID = "AuditedEntityExplorerTopComponent",
    iconBase = "resources/audit.png",
    persistenceType = TopComponent.PERSISTENCE_ONLY_OPENED
)
@TopComponent.Registration(
    mode = "explorer", 
    openAtStartup = false, 
    position=3
)
@ActionID(
    category = "Window", 
    id = "org.jreserve.audit.global.AuditedEntityExplorerTopComponent"
)
@ActionReference(
    path = "Menu/Window", 
    position = 460
)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_AuditedEntityExplorerAction",
    preferredID = "AuditedEntityExplorerTopComponent"
)
@Messages({
    "CTL_AuditedEntityExplorerAction=Archive Explorer",
    "CTL_AuditedEntityExplorerTopComponent=Archive Explorer Window"
})
public final class AuditedEntityExplorerTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {

    private final static ExplorerManager em = new ExplorerManager();
    private Lookup.Result<org.hibernate.SessionFactory> result;
    private boolean contextWasOpen = false;

    public AuditedEntityExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_AuditedEntityExplorerTopComponent());
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        treeView = new org.openide.explorer.view.BeanTreeView();

        setLayout(new java.awt.BorderLayout());

        treeView.setRootVisible(false);
        add(treeView, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.BeanTreeView treeView;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        openGroup();
        initResult();
    }
    
    private void openGroup() {
        TopComponent tc = WindowManager.getDefault().findTopComponent("ContextAuditorTopComponent");
        if(tc != null && !tc.isOpened()) {
            contextWasOpen = tc.isOpened();
            if(!contextWasOpen)
                tc.open();
        }
    }
    
    private void initResult() {
        result = PersistenceUtil.getLookup().lookupResult(org.hibernate.SessionFactory.class);
        result.addLookupListener(this);
        lookupChanged();
    }
    
    @Override
    public void componentClosed() {
        closeGroup();
        clearResult();
    }
    
    private void closeGroup() {
        TopComponent tc = WindowManager.getDefault().findTopComponent("ContextAuditorTopComponent");
        if(tc != null && !contextWasOpen)
            tc.close();
    }
    
    private void clearResult() {
        if(result != null) {
            result.removeLookupListener(this);
            result = null;
        }
    }

    void writeProperties(java.util.Properties p) {
    }

    void readProperties(java.util.Properties p) {
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void resultChanged(LookupEvent le) {
        lookupChanged();
    }
    
    private void lookupChanged() {
        if(SessionFactory.isConnected()) {
            AuditedEntity root = new AuditedEntity(null, "ROOT", null);
            em.setRootContext(new AuditedEntityNode(root));
        } else {
            em.setRootContext(new AbstractNode(Children.LEAF));
        }
    }
}
