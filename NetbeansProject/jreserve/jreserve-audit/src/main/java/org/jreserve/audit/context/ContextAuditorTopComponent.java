package org.jreserve.audit.context;

import java.util.List;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.DefaultEditorKit;
import org.jreserve.audit.AuditElement;
import org.jreserve.audit.Auditable;
import org.jreserve.audit.table.CopyDataAction;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.actions.CopyAction;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.actions.SystemAction;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;

@ConvertAsProperties(
    dtd = "-//org.jreserve.audit.context//ContextAuditor//EN",
    autostore = false
)
@TopComponent.Description(
    preferredID = "ContextAuditorTopComponent",
    iconBase = "resources/audit.png",
    persistenceType = TopComponent.PERSISTENCE_ONLY_OPENED
)
@TopComponent.Registration(
    mode = "editor", 
    openAtStartup = false
)
@ActionID(
    category = "Window", 
    id = "org.jreserve.audit.context.ContextAuditorTopComponent"
)
@ActionReference(
    path = "Menu/Window",
    position = 450
)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_ContextAuditorAction",
    preferredID = "ContextAuditorTopComponent"
)
@Messages({
    "CTL_ContextAuditorAction=Context Auditor",
    "CTL_ContextAuditorTopComponent=Context Auditor Window"
})
public final class ContextAuditorTopComponent extends TopComponent implements LookupListener, Lookup.Provider, ChangeListener {

    private final static String NO_PATH = "-";

    private InstanceContent ic = new InstanceContent();
    private Lookup lookup = new AbstractLookup(ic);
    private Result<Auditable> result;
    private Auditable previousAuditable;
    
    public ContextAuditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_ContextAuditorTopComponent());
        registerCopyAction();
    }
    
    private void registerCopyAction() {
        KeyStroke stroke = KeyStroke.getKeyStroke("control C");
        getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(stroke, DefaultEditorKit.copyAction);
        table.getInputMap().put(stroke, DefaultEditorKit.copyAction);
        table.getTableInputMap().put(stroke, DefaultEditorKit.copyAction);
        getActionMap().put(DefaultEditorKit.copyAction, new CopyDataAction(table));
        ic.add(getActionMap());
    }

    @Override
    public void resultChanged(LookupEvent le) {
        queryAuditable();
    }
    
    private void queryAuditable() {
        Auditable auditable = Utilities.actionsGlobalContext().lookup(Auditable.class);
        if(auditable == previousAuditable)
            return;
        setAuditable(auditable);
    }
    
    private void setAuditable(Auditable auditable) {
        previousAuditable = auditable;
        setPathText();
        table.setAuditable(auditable);
        setLookupContent();
    }

    private void setPathText() {
        String path = previousAuditable==null? NO_PATH : previousAuditable.getDisplayName();
        pathText.setText(path);
    }
    
    private void setLookupContent() {
        clearLookup();
        if(previousAuditable != null)
            ic.add(previousAuditable);
    }
    
    private void clearLookup() {
        for(Auditable o : lookup.lookupAll(Auditable.class))
            ic.remove(o);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        northPanel = new javax.swing.JPanel();
        pathLabel = new javax.swing.JLabel();
        pathText = new javax.swing.JLabel();
        copyButton = new org.jreserve.resources.ToolBarButton(SystemAction.get(CopyAction.class));
        table = new org.jreserve.audit.table.AuditTable();

        setLayout(new java.awt.BorderLayout());

        northPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        northPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(pathLabel, org.openide.util.NbBundle.getMessage(ContextAuditorTopComponent.class, "LBL.ContextAuditorTopComponent.Path")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        northPanel.add(pathLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(pathText, NO_PATH);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        northPanel.add(pathText, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(copyButton, null);
        copyButton.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        northPanel.add(copyButton, gridBagConstraints);

        add(northPanel, java.awt.BorderLayout.NORTH);

        table.addChangeListener(this);
        add(table, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jreserve.resources.ToolBarButton copyButton;
    private javax.swing.JPanel northPanel;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JLabel pathText;
    private org.jreserve.audit.table.AuditTable table;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(Auditable.class);
        result.addLookupListener(this);
        queryAuditable();
    }

    @Override
    public void componentClosed() {
        table.stopLoader();
        result.removeLookupListener(this);
        result = null;
    }

    void writeProperties(java.util.Properties p) {
    }

    void readProperties(java.util.Properties p) {
    }

    @Override
    public Lookup getLookup() {
        return lookup;
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        List<AuditElement> changes = table.getChanges();
        copyButton.setEnabled(!changes.isEmpty());
    }
}
