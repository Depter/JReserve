package org.jreserve.persistence.revision.context;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import org.jreserve.persistence.EntityAuditor;
import org.jreserve.persistence.PersistenceUnit;
import org.jreserve.persistence.PersistenceUtil;
import org.jreserve.persistence.revision.AuditElement;
import org.jreserve.persistence.revision.AuditQueryUtil;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;

@ConvertAsProperties(
    dtd = "-//org.jreserve.persistence.revision.context//ContextAuditor//EN",
    autostore = false
)
@TopComponent.Description(
    preferredID = "ContextAuditorTopComponent",
    iconBase="resources/audit.png", 
    persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(
    mode = "editor", 
    openAtStartup = false
)
@ActionID(
    category = "Window", 
    id = "org.jreserve.persistence.revision.context.ContextAuditorTopComponent"
)
@ActionReference(
    path = "Menu/Window" /*
 * , position = 333
 */
)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_ContextAuditorAction",
    preferredID = "ContextAuditorTopComponent"
)
@Messages({
    "CTL_ContextAuditorAction=Context Auditor",
    "CTL_ContextAuditorTopComponent=ContextAuditor Window"
})
public final class ContextAuditorTopComponent extends TopComponent implements LookupListener, Lookup.Provider {

    private ChangeTableModel tableModel = new ChangeTableModel();
    private InstanceContent ic = new InstanceContent();
    private Lookup lookup = new AbstractLookup(ic);
    
    private Result<EntityAuditor> result;
    private Result<PersistenceUnit> puResult;
    private boolean connected;
    private AuditQueryUtil auditUtil;
    
    public ContextAuditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_ContextAuditorTopComponent());
        initConnectionChecking();
        initAuditChecking();
    }

    private void initConnectionChecking() {
        puResult = PersistenceUtil.getLookup().lookupResult(PersistenceUnit.class);
        puResult.addLookupListener(this);
        checkConnected();
    }
    
    private void checkConnected() {
        connected = !puResult.allInstances().isEmpty();
        if(!connected && auditUtil!=null) {
            auditUtil = null;
        } else if(connected && auditUtil==null) {
            auditUtil = new AuditQueryUtil();
            auditUtil.open();
        }
    }

    private void initAuditChecking() {
        result = Utilities.actionsGlobalContext().lookupResult(EntityAuditor.class);
        result.addLookupListener(this);
        checkAudit();
    }
    
    @Override
    public void resultChanged(LookupEvent le) {
        checkConnected();
        checkAudit();
    }

    private void checkAudit() {
        EntityAuditor auditor = getAuditor();
        setNameText(auditor);
        if(!connected)
            return;
        makeAudit(auditor);
    }
    
    private EntityAuditor getAuditor() {
        List<EntityAuditor> auditors = new ArrayList<EntityAuditor>(result.allInstances());
        if(auditors.isEmpty())
            return null;
        return auditors.get(0);
    }
    
    private void setNameText(EntityAuditor auditor) {
        String path = auditor==null? "-" : auditor.getName();
        pathText.setText(path);
        clearLookup();
    }
    
    private void clearLookup() {
        Collection c = lookup.lookupAll(Object.class);
        for(Object o : c)
            ic.remove(o);
    }
    
    private void makeAudit(EntityAuditor auditor) {
        List<AuditElement> changes = getChanges(auditor);
        tableModel.setChanges(changes); 
    }
    
    private List<AuditElement> getChanges(EntityAuditor auditor) {
        if(auditor == null)
            return Collections.EMPTY_LIST;
        return auditUtil.getChanges(auditor);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        northPanel = new javax.swing.JPanel();
        pathLabel = new javax.swing.JLabel();
        pathText = new javax.swing.JLabel();
        changeScroll = new javax.swing.JScrollPane();
        changeTable = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
        setLayout(new java.awt.BorderLayout(15, 15));

        northPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(pathLabel, org.openide.util.NbBundle.getMessage(ContextAuditorTopComponent.class, "LBL.ContextAuditorTopComponent.Path")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        northPanel.add(pathLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(pathText, null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        northPanel.add(pathText, gridBagConstraints);

        add(northPanel, java.awt.BorderLayout.NORTH);

        changeTable.setModel(tableModel);
        changeTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        changeTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        changeScroll.setViewportView(changeTable);

        add(changeScroll, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane changeScroll;
    private javax.swing.JTable changeTable;
    private javax.swing.JPanel northPanel;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JLabel pathText;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    @Override
    public Lookup getLookup() {
        return lookup;
    }
    
    void writeProperties(java.util.Properties p) {
    }

    void readProperties(java.util.Properties p) {
    }
}
