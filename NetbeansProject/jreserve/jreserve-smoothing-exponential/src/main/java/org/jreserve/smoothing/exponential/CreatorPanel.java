package org.jreserve.smoothing.exponential;

import java.awt.CardLayout;
import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.AbstractTableModel;
import org.jreserve.localesettings.util.DoubleRenderer;
import org.jreserve.persistence.PersistentObject;
import org.jreserve.smoothing.Smoothing;
import org.jreserve.smoothing.SwingLoader;
import org.openide.util.ImageUtilities;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
public class CreatorPanel extends javax.swing.JPanel implements ActionListener, DocumentListener, WindowListener {
    
    private final static Logger logger = Logger.getLogger(CreatorPanel.class.getName());
    
    private final static String ERR_IMG = "org/netbeans/modules/dialogs/error.gif";
    private final static String CARD_MSG = "MSG_LABEL";
    private final static String CARD_PBAR = "PBAR_LABEL";
    private final static double DEFAULT_ALPHA = 0d;
    
    private Dialog dialog;
    
    private DoubleRenderer renderer = new DoubleRenderer();
    private Smoothing smoothing = new ExponentialSmoothing(DEFAULT_ALPHA);
    private SmoothTableModel model = new SmoothTableModel();
    private boolean cancelled = false;
    
    private Loader loader;
    private List<Smoothing> smoothings;
    private CardLayout msgLayout;
    
    public CreatorPanel(PersistentObject owner, double[] input) {
        model.input = input;
        initComponents();
        msgLayout = (CardLayout) msgPanel.getLayout();
        checkInput();
        startLoading(owner);
    }
    
    private void startLoading(PersistentObject owner) {
        nameText.setEnabled(false);
        alphaText.setEnabled(false);
        okButton.setEnabled(false);
        msgLayout.show(msgPanel, CARD_PBAR);
        pBar.setIndeterminate(true);
        loader = new Loader(owner);
        loader.execute();
    }
    
    private void setDialog(Dialog dialog) {
        this.dialog = dialog;
        this.dialog.addWindowListener(this);
    }
    
    @Override
    public void insertUpdate(DocumentEvent e) {
        checkInput();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        checkInput();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
    }
    
    private void checkInput() {
    }
    
    private void cancel() {
    }
        
    private void stopLoading() {
        msgLayout.show(msgPanel, CARD_MSG);
        nameText.setEnabled(true);
        pBar.setIndeterminate(false);
        loader = null;
    }
    
    private void showError(String msg) {
        msgLabel.setVisible(msg != null);
        msgLabel.setText(msg);
        msgLayout.show(msgPanel, CARD_MSG);
    }
    
    @Override
    public void actionPerformed(ActionEvent evt) {
        Object source = evt.getSource();
        if(okButton == source) {
            //name = nameText.getText();
        } else {
            cancel();
        }
        //dialog.dispose();
    }

    @Override
    public void windowClosing(WindowEvent e) {
        cancel();
    }
    
    @Override public void windowOpened(WindowEvent e) {}
    @Override public void windowClosed(WindowEvent e) {}
    @Override public void windowIconified(WindowEvent e) {}
    @Override public void windowDeiconified(WindowEvent e) {}
    @Override public void windowActivated(WindowEvent e) {}
    @Override public void windowDeactivated(WindowEvent e) {}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        northPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        alphaLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        alphaText = new javax.swing.JTextField();
        soutPanel = new javax.swing.JPanel();
        msgPanel = new javax.swing.JPanel();
        pBarPanel = new javax.swing.JPanel();
        pBarLabel = new javax.swing.JLabel();
        pBar = new javax.swing.JProgressBar();
        msgLabelPanel = new javax.swing.JPanel();
        msgLabel = new javax.swing.JLabel(ImageUtilities.loadImageIcon(ERR_IMG, false));
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        cancelButton = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
        setLayout(new java.awt.BorderLayout());

        northPanel.setLayout(new java.awt.GridBagLayout());

        nameLabel.setText(org.openide.util.NbBundle.getMessage(CreatorPanel.class, "LBL.CreatorPanel.Name")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        northPanel.add(nameLabel, gridBagConstraints);

        alphaLabel.setText(org.openide.util.NbBundle.getMessage(CreatorPanel.class, "LBL.CreatorPanel.Alpha")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        northPanel.add(alphaLabel, gridBagConstraints);

        nameText.setText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        northPanel.add(nameText, gridBagConstraints);

        alphaText.setText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        northPanel.add(alphaText, gridBagConstraints);

        add(northPanel, java.awt.BorderLayout.NORTH);

        soutPanel.setLayout(new java.awt.BorderLayout(0, 5));

        msgPanel.setLayout(new java.awt.CardLayout());

        pBarPanel.setLayout(new java.awt.BorderLayout());

        pBarLabel.setText(org.openide.util.NbBundle.getMessage(CreatorPanel.class, "LBL.CreatorPanel.Loading")); // NOI18N
        pBarPanel.add(pBarLabel, java.awt.BorderLayout.NORTH);
        pBarPanel.add(pBar, java.awt.BorderLayout.WEST);

        msgPanel.add(pBarPanel, "PBAR_LABEL");

        msgLabelPanel.setLayout(new java.awt.BorderLayout());

        msgLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        msgLabel.setText(null);
        msgLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        msgLabelPanel.add(msgLabel, java.awt.BorderLayout.CENTER);

        msgPanel.add(msgLabelPanel, "MSG_LABEL");

        soutPanel.add(msgPanel, java.awt.BorderLayout.NORTH);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 0, 0));

        okButton.setText(org.openide.util.NbBundle.getMessage(CreatorPanel.class, "CTL.CreatorPanel.Ok")); // NOI18N
        okButton.addActionListener(this);
        buttonPanel.add(okButton);
        buttonPanel.add(filler2);

        cancelButton.setText(org.openide.util.NbBundle.getMessage(CreatorPanel.class, "CTL.CreatorPanel.Cancel")); // NOI18N
        cancelButton.addActionListener(this);
        buttonPanel.add(cancelButton);

        soutPanel.add(buttonPanel, java.awt.BorderLayout.SOUTH);

        add(soutPanel, java.awt.BorderLayout.SOUTH);

        javax.swing.GroupLayout centerPanelLayout = new javax.swing.GroupLayout(centerPanel);
        centerPanel.setLayout(centerPanelLayout);
        centerPanelLayout.setHorizontalGroup(
            centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 370, Short.MAX_VALUE)
        );
        centerPanelLayout.setVerticalGroup(
            centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 162, Short.MAX_VALUE)
        );

        add(centerPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alphaLabel;
    private javax.swing.JTextField alphaText;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel centerPanel;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JPanel msgLabelPanel;
    private javax.swing.JPanel msgPanel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JPanel northPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JProgressBar pBar;
    private javax.swing.JLabel pBarLabel;
    private javax.swing.JPanel pBarPanel;
    private javax.swing.JPanel soutPanel;
    // End of variables declaration//GEN-END:variables


    private class SmoothTableModel extends AbstractTableModel {
        
        private double[] input = new double[0];
        private double[] smoothed;
        
        private void setSmoothed(double[] smoothed) {
            this.smoothed = smoothed;
            super.fireTableDataChanged();
        }
        
        @Override
        public int getRowCount() {
            return input.length;
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return Double.class;
        }

        @Override
        public String getColumnName(int column) {
            if(column == 0)
                return "Input";
            return "Output";
        }

        @Override
        public Object getValueAt(int row, int column) {
            if(column == 0)
                return input[row];
            return smoothed[row];
        }
    }


    private class Loader extends SwingLoader {
        
        private Loader(PersistentObject owner) {
            super(owner);
        }

        @Override
        protected void done() {
            try {
                if(cancelled)
                    return;
                smoothings = get();
                checkInput();
            } catch (Exception ex) {
                logger.log(Level.SEVERE, "Unable to load smoothings!", ex);
                showError(ex.getLocalizedMessage());
            } finally {
                stopLoading();
            }
        }
    }

}
