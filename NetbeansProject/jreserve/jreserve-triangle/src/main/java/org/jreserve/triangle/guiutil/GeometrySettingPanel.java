package org.jreserve.triangle.guiutil;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Date;
import org.jreserve.triangle.entities.TriangleGeometry;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author PEter Decsi
 */
@Messages({
    "MSG.GeometrySettingPanel.Accident.Invalid.From=Field 'Begin' in group 'Accident' is invalid!",
    "MSG.GeometrySettingPanel.Accident.Invalid.Periods=Field 'Periods' in group 'Accident' is invalid!",
    "MSG.GeometrySettingPanel.Accident.Invalid.Months=Field 'Month per step' in group 'Accident' is invalid!",
    "MSG.GeometrySettingPanel.Development.Invalid.From=Field 'Begin' in group 'Development' is invalid!",
    "MSG.GeometrySettingPanel.Development.Invalid.Periods=Field 'Periods' in group 'Development' is invalid!",
    "MSG.GeometrySettingPanel.Development.Invalid.Months=Field 'Month per step' in group 'Development' is invalid!"
})
public class GeometrySettingPanel extends javax.swing.JPanel implements PropertyChangeListener, ActionListener {

    public final static String PROPERTY_TRIANGLE_GEOMETRY = "TRIANGLE GEOMETRY";
    public final static String PROPERTY_ERROR = "TRIANGLE GEOMETRY ERROR";
    
    private boolean isValid;
    
    public GeometrySettingPanel() {
        initComponents();
    }
    
    public boolean isInputValid() {
        return isValid;
    }
    
    public String getErrorMsg() {
        return (String) getClientProperty(PROPERTY_ERROR);
    }

    public void setSymmetricEnabled(boolean enabled) {
        setSymmetricFromDateEnabled(enabled);
        setSymmetricPeriodsEnabled(enabled);
        setSymmetricMonthsEnabled(enabled);
    }
    
    public void setSymmetricFromDateEnabled(boolean enabled) {
        beginSymmetry.setEnabled(enabled);
    }
    
    public void setSymmetricPeriodsEnabled(boolean enabled) {
        periodsSymmetry.setEnabled(enabled);
    }
    
    public void setSymmetricMonthsEnabled(boolean enabled) {
        monthsSymmetry.setEnabled(enabled);
    }
    
    public void setSymmetricFromDate(boolean symmetric) {
        beginSymmetry.setSelected(symmetric);
    }
    
    public boolean isSymmetricFromDate() {
        return beginSymmetry.isSelected();
    }
    
    public void setSymmetricPeriods(boolean symmetric) {
        periodsSymmetry.setSelected(symmetric);
    }
    
    public boolean isSymmetricPeriods() {
        return periodsSymmetry.isSelected();
    }
    
    public void setSymmetricMonths(boolean symmetric) {
        monthsSymmetry.setSelected(symmetric);
    }
    
    public boolean isSymmetricMonths() {
        return monthsSymmetry.isSelected();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        accidentGeometry = new org.jreserve.triangle.guiutil.AxisGeometryPanel();
        developmentGeometry = new org.jreserve.triangle.guiutil.AxisGeometryPanel();
        symmetryPanel = new javax.swing.JPanel();
        beginLabel = new javax.swing.JLabel();
        periodsLabel = new javax.swing.JLabel();
        monthsLabel = new javax.swing.JLabel();
        beginSymmetry = new javax.swing.JCheckBox();
        periodsSymmetry = new javax.swing.JCheckBox();
        monthsSymmetry = new javax.swing.JCheckBox();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));

        setLayout(new java.awt.GridBagLayout());

        accidentGeometry.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(GeometrySettingPanel.class, "LBL.GeometrySettingPanel.Geometry.Accident")), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5))); // NOI18N
        accidentGeometry.addPropertyChangeListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(accidentGeometry, gridBagConstraints);

        developmentGeometry.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(GeometrySettingPanel.class, "LBL.GeometrySettingPanel.Geometry.Development")), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5))); // NOI18N
        developmentGeometry.setEnabled(false);
        developmentGeometry.addPropertyChangeListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(developmentGeometry, gridBagConstraints);

        symmetryPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(GeometrySettingPanel.class, "LBL.GeometrySettingPanel.Symmetry")), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5))); // NOI18N
        symmetryPanel.setLayout(new java.awt.GridBagLayout());

        beginLabel.setText(org.openide.util.NbBundle.getMessage(GeometrySettingPanel.class, "LBL.GeometrySettingPanel.Symmetry.Begin")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        symmetryPanel.add(beginLabel, gridBagConstraints);

        periodsLabel.setText(org.openide.util.NbBundle.getMessage(GeometrySettingPanel.class, "LBL.GeometrySettingPanel.Symmetry.Periods")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        symmetryPanel.add(periodsLabel, gridBagConstraints);

        monthsLabel.setText(org.openide.util.NbBundle.getMessage(GeometrySettingPanel.class, "LBL.GeometrySettingPanel.Symmetry.Months")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        symmetryPanel.add(monthsLabel, gridBagConstraints);

        beginSymmetry.setSelected(true);
        beginSymmetry.setText(null);
        beginSymmetry.setMaximumSize(new java.awt.Dimension(91, 18));
        beginSymmetry.setMinimumSize(new java.awt.Dimension(18, 18));
        beginSymmetry.setPreferredSize(new java.awt.Dimension(91, 18));
        beginSymmetry.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        symmetryPanel.add(beginSymmetry, gridBagConstraints);

        periodsSymmetry.setSelected(true);
        periodsSymmetry.setText(null);
        periodsSymmetry.setMaximumSize(new java.awt.Dimension(91, 18));
        periodsSymmetry.setMinimumSize(new java.awt.Dimension(18, 18));
        periodsSymmetry.setPreferredSize(new java.awt.Dimension(91, 18));
        periodsSymmetry.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        symmetryPanel.add(periodsSymmetry, gridBagConstraints);

        monthsSymmetry.setSelected(true);
        monthsSymmetry.setText(null);
        monthsSymmetry.setMaximumSize(new java.awt.Dimension(91, 18));
        monthsSymmetry.setMinimumSize(new java.awt.Dimension(18, 18));
        monthsSymmetry.setPreferredSize(new java.awt.Dimension(91, 18));
        monthsSymmetry.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        symmetryPanel.add(monthsSymmetry, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        add(symmetryPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(filler2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jreserve.triangle.guiutil.AxisGeometryPanel accidentGeometry;
    private javax.swing.JLabel beginLabel;
    private javax.swing.JCheckBox beginSymmetry;
    private org.jreserve.triangle.guiutil.AxisGeometryPanel developmentGeometry;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JLabel monthsLabel;
    private javax.swing.JCheckBox monthsSymmetry;
    private javax.swing.JLabel periodsLabel;
    private javax.swing.JCheckBox periodsSymmetry;
    private javax.swing.JPanel symmetryPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();
        if(beginSymmetry == source) {
            setBeginSymmetric(beginSymmetry.isSelected());
        } else if(periodsSymmetry == source) {
            setPeriodsSymmetric(periodsSymmetry.isSelected());
        } else if(monthsSymmetry == source) {
            setMonthsSymmetric(monthsSymmetry.isSelected());
        }
    }
    
    private void setBeginSymmetric(boolean simmetric) {
        developmentGeometry.setFromDateEnabled(!simmetric);
        if(simmetric) {
            Date begin = accidentGeometry.getFromDate();
            developmentGeometry.setFromDate(begin);
        }
    }
    
    private void setPeriodsSymmetric(boolean simmetric) {
        developmentGeometry.setPeriodsEnabled(!simmetric);
        if(simmetric) {
            int periods = accidentGeometry.getPeriods();
            developmentGeometry.setPeriods(periods);
        }
    }
    
    private void setMonthsSymmetric(boolean simmetric) {
        developmentGeometry.setMonthsEnabled(!simmetric);
        if(simmetric) {
            int months = accidentGeometry.getMonthPerStep();
            developmentGeometry.setMonthPerStep(months);
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if(accidentGeometry == evt.getSource())
            setSymmetricValues();
        
        checkInput();
        TriangleGeometry geometry = getGeometry();
        putClientProperty(PROPERTY_TRIANGLE_GEOMETRY, geometry);
    }
    
    private void setSymmetricValues() {
        if(beginSymmetry.isSelected())
            developmentGeometry.setFromDate(accidentGeometry.getFromDate());
        if(periodsSymmetry.isSelected())
            developmentGeometry.setPeriods(accidentGeometry.getPeriods());
        if(monthsSymmetry.isSelected())
            developmentGeometry.setMonthPerStep(accidentGeometry.getMonthPerStep());
    }
    
    private void checkInput() {
        isValid = checkAccidentFromDate() && checkDevelopmentFromDate() &&
                checkAccidentPeriods() && checkDevelopmentPeriods() &&
                checkAccidentMonths() && checkDevelopmentMonths();
        if(isValid)
            putClientProperty(PROPERTY_ERROR, null);
    }
    
    private boolean checkAccidentFromDate() {
        if(accidentGeometry.getFromDate() == null) {
            String msg = NbBundle.getMessage(GeometrySettingPanel.class, "MSG.GeometrySettingPanel.Accident.Invalid.From");
            putClientProperty(PROPERTY_ERROR, msg);
            return false;
        }
        return true;
    }
    
    private boolean checkDevelopmentFromDate() {
        if(developmentGeometry.getFromDate() == null) {
            String msg = NbBundle.getMessage(GeometrySettingPanel.class, "MSG.GeometrySettingPanel.Development.Invalid.From");
            putClientProperty(PROPERTY_ERROR, msg);
            return false;
        }
        return true;
    }
    
    private boolean checkAccidentPeriods() {
        if(accidentGeometry.getPeriods() < 1) {
            String msg = NbBundle.getMessage(GeometrySettingPanel.class, "MSG.GeometrySettingPanel.Accident.Invalid.Periods");
            putClientProperty(PROPERTY_ERROR, msg);
            return false;
        }
        return true;
    }
    
    private boolean checkDevelopmentPeriods() {
        if(developmentGeometry.getPeriods() < 1) {
            String msg = NbBundle.getMessage(GeometrySettingPanel.class, "MSG.GeometrySettingPanel.Development.Invalid.Periods");
            putClientProperty(PROPERTY_ERROR, msg);
            return false;
        }
        return true;
    }
    
    private boolean checkAccidentMonths() {
        if(accidentGeometry.getMonthPerStep() < 1) {
            String msg = NbBundle.getMessage(GeometrySettingPanel.class, "MSG.GeometrySettingPanel.Accident.Invalid.Months");
            putClientProperty(PROPERTY_ERROR, msg);
            return false;
        }
        return true;
    }
    
    private boolean checkDevelopmentMonths() {
        if(developmentGeometry.getMonthPerStep() < 1) {
            String msg = NbBundle.getMessage(GeometrySettingPanel.class, "MSG.GeometrySettingPanel.Development.Invalid.Months");
            putClientProperty(PROPERTY_ERROR, msg);
            return false;
        }
        return true;
    }
    
    public TriangleGeometry getGeometry() {
        Date aStart = accidentGeometry.getFromDate();
        int aPeriods = accidentGeometry.getPeriods();
        int aMonths = accidentGeometry.getMonthPerStep();
        
        Date dStart = developmentGeometry.getFromDate();
        int dPeriods = developmentGeometry.getPeriods();
        int dMonths = developmentGeometry.getMonthPerStep();
        
        if(aStart==null || dStart==null || 
           aPeriods < 1 || dPeriods < 1 ||
           aMonths < 1 || dMonths < 1)
            return null;
        
        return new TriangleGeometry(aStart, aPeriods, aMonths, 
                dStart, dPeriods, dMonths);
    }
    
    public Date getAccidentStartDate() {
        return accidentGeometry.getFromDate();
    }
    
    public void setAccidentStartDate(Date date) {
        accidentGeometry.setFromDate(date);
    }
    
    public Date getDevelopmentStartDate() {
        return developmentGeometry.getFromDate();
    }
    
    public void setDevelopmentStartDate(Date date) {
        developmentGeometry.setFromDate(date);
    }
    
    public int getAccidentPeriodCount() {
        return accidentGeometry.getPeriods();
    }
    
    public void setAccidentPeriodCount(int periods) {
        accidentGeometry.setPeriods(periods);
    }
    
    public int getDevelopmentPeriodCount() {
        return developmentGeometry.getPeriods();
    }
    
    public void setDevelopmentPeriodCount(int periods) {
        developmentGeometry.setPeriods(periods);
    }
    
    public int getAccidentMonthsPerStep() {
        return accidentGeometry.getMonthPerStep();
    }
    
    public void setAccidentMonthsPerStep(int months) {
        accidentGeometry.setMonthPerStep(months);
    }

    public int getDevelopmentMonthsPerStep() {
        return developmentGeometry.getMonthPerStep();
    }
    
    public void setDevelopmentMonthsPerStep(int months) {
        developmentGeometry.setMonthPerStep(months);
    }
}
