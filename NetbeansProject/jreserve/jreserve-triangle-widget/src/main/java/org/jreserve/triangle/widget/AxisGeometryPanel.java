package org.jreserve.triangle.widget;

import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jreserve.resources.textfieldfilters.IntegerFilter;
import org.openide.util.Exceptions;

/**
 *
 * @author Peter Decsi
 */
public class AxisGeometryPanel extends javax.swing.JPanel implements ChangeListener {
    
    public final static String PROPERTY_PERIODS = "PERIODS";
    public final static String PROPERTY_MONTHS = "MONTHS";

    private final static int DEFAULT_PERIODS = 1;
    private final static int DEFAULT_STEPS = 12;
    
    private SpinnerNumberModel periodModel = new SpinnerNumberModel(DEFAULT_PERIODS, 1, Integer.MAX_VALUE, 1);
    private SpinnerNumberModel monthModel = new SpinnerNumberModel(DEFAULT_STEPS, 1, Integer.MAX_VALUE, 1);
    
    public AxisGeometryPanel() {
        initComponents();
    }
    
    @Override
    public void setEnabled(boolean enabled) {
        periodSpinner.setEnabled(enabled);
        monthsSpinner.setEnabled(enabled);
    }
    
    public void setPeriodsEnabled(boolean enabled) {
        periodSpinner.setEnabled(enabled);
    }
    
    public int getPeriods() {
        return periodModel.getNumber().intValue();
    }
    
    public void setPeriods(int periods) {
        periodModel.setValue(periods);
    }
    
    public void setMonthsEnabled(boolean enabled) {
        monthsSpinner.setEnabled(enabled);
    }
    
    public int getMonthPerStep() {
        return monthModel.getNumber().intValue();
    }
    
    public void setMonthPerStep(int months) {
        monthModel.setValue(months);
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        Object source = e.getSource();
        if(periodSpinner == source) {
            setProperty(PROPERTY_PERIODS, periodSpinner.getValue());
        } else if(monthsSpinner == source) {
            setProperty(PROPERTY_MONTHS, monthsSpinner.getValue());
        }
    }
    
    private void setProperty(String name, Object value) {
        putClientProperty(name, value);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        toLabel = new javax.swing.JLabel();
        stepLabel = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        periodSpinner = new javax.swing.JSpinner();
        monthsSpinner = new javax.swing.JSpinner();

        setPreferredSize(new java.awt.Dimension(140, 41));
        setLayout(new java.awt.GridBagLayout());

        toLabel.setText(org.openide.util.NbBundle.getMessage(AxisGeometryPanel.class, "LBL.AxisGeometryPanel.Periods")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(toLabel, gridBagConstraints);

        stepLabel.setText(org.openide.util.NbBundle.getMessage(AxisGeometryPanel.class, "LBL.AxisGeometryPanel.Steps")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(stepLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(filler1, gridBagConstraints);

        periodSpinner.setModel(periodModel);
        periodSpinner.setEditor(new IntegerEditor(periodSpinner));
        periodSpinner.addChangeListener(this);
        periodSpinner.setPreferredSize(new java.awt.Dimension(40, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(periodSpinner, gridBagConstraints);

        monthsSpinner.setModel(monthModel);
        monthsSpinner.setEditor(new IntegerEditor(monthsSpinner));
        monthsSpinner.addChangeListener(this);
        monthsSpinner.setPreferredSize(new java.awt.Dimension(40, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        add(monthsSpinner, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JSpinner monthsSpinner;
    private javax.swing.JSpinner periodSpinner;
    private javax.swing.JLabel stepLabel;
    private javax.swing.JLabel toLabel;
    // End of variables declaration//GEN-END:variables
    
    private static class IntegerEditor extends JPanel implements DocumentListener, ChangeListener {
        
        private JSpinner spinner;
        private JTextField editor = IntegerFilter.getTextField();
        private boolean fireEditorEvent = true;
        private boolean fireSpinnerEvent = true;
        
        IntegerEditor(JSpinner spinner) {
            super(new BorderLayout());
            super.add(editor, BorderLayout.CENTER);
            editor.getDocument().addDocumentListener(this);
            this.spinner = spinner;
            spinner.addChangeListener(this);
            readModelValue();
        }
        
        private void readModelValue() {
            fireEditorEvent = false;
            Object value = spinner.getModel().getValue();
            editor.setText(""+value);
            fireEditorEvent = true;
        }
        
        @Override
        public void insertUpdate(DocumentEvent e) {
            setModelValue();
        }
        
        private void setModelValue() {
            if(!fireEditorEvent)
                return;
            fireSpinnerEvent = false;
            int value = getFieldValue();
            spinner.getModel().setValue(value);
            fireSpinnerEvent = true;
        }
        
        private int getFieldValue() {
            String str = editor.getText();
            if(str == null || str.trim().length() == 0)
                return 0;
            return Integer.parseInt(str);
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            setModelValue();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
        }

        @Override
        public void stateChanged(ChangeEvent e) {
            if(!fireSpinnerEvent)
                return;
            try {
                readModelValue();
            } catch (RuntimeException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        
    }
}
