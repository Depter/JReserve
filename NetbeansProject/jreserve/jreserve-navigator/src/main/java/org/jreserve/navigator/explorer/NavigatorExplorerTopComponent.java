package org.jreserve.navigator.explorer;

import java.util.Collection;
import org.jreserve.navigator.NavigableComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Node;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.jreserve.navigator.explorer//NavigatorExplorer//EN",
    autostore = false
)
@TopComponent.Description(
    preferredID = "NavigatorExplorerTopComponent",
    //iconBase="SET/PATH/TO/ICON/HERE", 
    persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(
    mode = "navigator", 
    openAtStartup = true
)
@ActionID(
    category = "Window", 
    id = "org.jreserve.navigator.explorer.NavigatorExplorerTopComponent"
)
@ActionReference(
    path = "Menu/Window", 
    position = 470
)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_NavigatorExplorerAction",
    preferredID = "NavigatorExplorerTopComponent"
)
@Messages({
    "CTL_NavigatorExplorerAction=Open Navigator",
    "CTL_NavigatorExplorerTopComponent=Navigator"
})
public final class NavigatorExplorerTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {
    
    private final ExplorerManager em = new ExplorerManager();
    private Result<NavigableComponent> componentsResult;
    
    public NavigatorExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_NavigatorExplorerTopComponent());
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tree = new org.openide.explorer.view.BeanTreeView();

        setLayout(new java.awt.BorderLayout());

        tree.setRootVisible(false);
        add(tree, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.BeanTreeView tree;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        componentsResult = Utilities.actionsGlobalContext().lookupResult(NavigableComponent.class);
        componentsResult.addLookupListener(this);
        resultChanged(null);
    }

    @Override
    public void componentClosed() {
        if(componentsResult != null) {
            componentsResult.removeLookupListener(this);
            componentsResult = null;
        }
    }

    void writeProperties(java.util.Properties p) {
    }

    void readProperties(java.util.Properties p) {
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Collection<? extends NavigableComponent> c = componentsResult.allInstances();
        AbstractNode root = new AbstractNode(new NavigableComponentChildren(c));
        em.setRootContext(root);
        if(c.size() == 1)
            expandFirstChild(root);
    }
    
    private void expandFirstChild(AbstractNode root) {
        Node node = root.getChildren().getNodeAt(0);
        tree.expandNode(node);
    }
}
