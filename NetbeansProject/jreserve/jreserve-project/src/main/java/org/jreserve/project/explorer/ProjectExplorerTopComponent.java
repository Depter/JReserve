/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jreserve.project.explorer;

import org.jreserve.project.system.ProjectChildren;
import org.jreserve.project.system.ProjectElement;
import org.jreserve.project.system.RootElement;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.AbstractNode;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.jreserve.project.explorer//ProjectExplorer//EN",
    autostore = false
)
@TopComponent.Description(
    preferredID = "ProjectExplorerTopComponent",
    //iconBase="SET/PATH/TO/ICON/HERE", 
    persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(
    mode = "explorer", 
    openAtStartup = true, 
    position=1
)
@ActionID(
    category = "Window", 
    id = "org.jreserve.project.explorer.ProjectExplorerTopComponent"
)
@ActionReference(
    path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_ProjectExplorerAction",
    preferredID = "ProjectExplorerTopComponent"
)
@Messages({
    "CTL_ProjectExplorerAction=Project Explorer",
    "CTL_ProjectExplorerTopComponent=Project",
    "HINT_ProjectExplorerTopComponent=Manage projects"
})
public final class ProjectExplorerTopComponent extends TopComponent 
        implements ExplorerManager.Provider {

    private final static ExplorerManager em = new ExplorerManager();
    
    public ProjectExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_ProjectExplorerTopComponent());
        setToolTipText(Bundle.HINT_ProjectExplorerTopComponent());
        initializeTree();
    }
    
    private void initializeTree() {
        ProjectElement root = new RootElement();
        em.setRootContext(root.createNodeDelegate());
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
        projectTree.setRootVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectTree = new org.openide.explorer.view.BeanTreeView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(projectTree, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(projectTree, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.BeanTreeView projectTree;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
}
