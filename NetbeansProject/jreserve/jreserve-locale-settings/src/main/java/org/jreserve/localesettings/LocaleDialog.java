package org.jreserve.localesettings;

import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Locale;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 */
@Messages({
    "LBL.LocaleDialog.Title=Select language",
    "LBL.LocaleDialog.Language=Language:",
    "CTL.LocaleDialog.Ok=Ok",
    "CTL.LocaleDialog.Cancel=Cancel"
})
class LocaleDialog extends JPanel implements DocumentListener, ListSelectionListener, ActionListener {

    private final static boolean IS_MODAL = true;
    
    static Locale selectLocale() {
        LocaleDialog content = createDialog();
        content.dialog.setVisible(true);
        return content.locale;
    }
    
    private static LocaleDialog createDialog() {
        LocaleDialog content = new LocaleDialog();
        DialogDescriptor dd = createDescriptor(content);
        dd.setOptions(new Object[0]);
        content.dialog = DialogDisplayer.getDefault().createDialog(dd);
        content.dialog.pack();
        return content;
    }
    
    private static DialogDescriptor createDescriptor(LocaleDialog content) {
        return new DialogDescriptor(
            content,
            Bundle.LBL_LocaleDialog_Title(),
            IS_MODAL,
            null, null,
            DialogDescriptor.DEFAULT_ALIGN,
            HelpCtx.DEFAULT_HELP, null);
    }
    
    private LocaleListModel model = new LocaleListModel();
    private Locale locale = null;
    private Dialog dialog;
    
    public LocaleDialog() {
        initComponents();
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        setSearchText();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        setSearchText();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
    }
    
    private void setSearchText() {
        String str = searchText.getText();
        if(str != null && str.trim().length() == 0)
            str = null;
        model.setLanguage(str);
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        locale = (Locale) localeList.getSelectedValue();
        okButton.setEnabled(locale != null);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();
        if(okButton == source) {
            dialog.dispose();
        } else if(cancelButton == source) {
            locale = null;
            dialog.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchPanel = new javax.swing.JPanel();
        searchLabel = new javax.swing.JLabel();
        searchText = new javax.swing.JTextField();
        localeScroll = new javax.swing.JScrollPane();
        localeList = new javax.swing.JList();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        cancelButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
        setLayout(new java.awt.BorderLayout(15, 15));

        searchPanel.setLayout(new java.awt.BorderLayout(5, 0));

        searchLabel.setText(Bundle.LBL_LocaleDialog_Language());
        searchPanel.add(searchLabel, java.awt.BorderLayout.LINE_START);

        searchText.setText(null);
        searchText.getDocument().addDocumentListener(this);
        searchPanel.add(searchText, java.awt.BorderLayout.CENTER);

        add(searchPanel, java.awt.BorderLayout.NORTH);

        localeScroll.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        localeScroll.setPreferredSize(new java.awt.Dimension(230, 300));

        localeList.setModel(model);
        localeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        localeList.setCellRenderer(new LocaleListRenderer());
        localeList.addListSelectionListener(this);
        localeList.addMouseListener(new DblClickListener());
        localeScroll.setViewportView(localeList);

        add(localeScroll, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 0, 0));

        okButton.setText(Bundle.CTL_LocaleDialog_Ok());
        okButton.addActionListener(this);
        buttonPanel.add(okButton);
        buttonPanel.add(filler1);

        cancelButton.setText(Bundle.CTL_LocaleDialog_Cancel());
        cancelButton.addActionListener(this);
        buttonPanel.add(cancelButton);

        add(buttonPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JList localeList;
    private javax.swing.JScrollPane localeScroll;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchText;
    // End of variables declaration//GEN-END:variables

    private class DblClickListener extends MouseAdapter {

        @Override
        public void mouseClicked(MouseEvent evt) {
            if(evt.getClickCount() == 2) {
                locale = (Locale) localeList.getSelectedValue();
                if(locale != null) 
                    dialog.dispose();
            }
        }
    
        
    }
}
