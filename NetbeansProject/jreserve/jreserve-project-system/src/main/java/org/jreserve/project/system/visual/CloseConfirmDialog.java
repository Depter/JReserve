package org.jreserve.project.system.visual;

import java.awt.BorderLayout;
import java.awt.Frame;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Icon;
import javax.swing.JDialog;
import org.netbeans.api.actions.Savable;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.lookup.Lookups;
import org.openide.windows.WindowManager;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
public class CloseConfirmDialog extends javax.swing.JPanel implements ExplorerManager.Provider, ActionListener {

    public static boolean canClose(Lookup lookup) {
        CloseConfirmDialog content = new CloseConfirmDialog(lookup);
        showDialog(content);
        return !content.cancelled;
    }
    
    private static void showDialog(CloseConfirmDialog content) {
        Frame owner = WindowManager.getDefault().getMainWindow();
        String title = org.openide.util.NbBundle.getMessage(CloseConfirmDialog.class, "LBL.CloseConfirmForm.Title");
        JDialog dialog = new JDialog(owner, title, true);
        dialog.getContentPane().add(content, BorderLayout.CENTER);
        content.dialog = dialog;
        dialog.pack();
        dialog.setVisible(true);
    }
    
    private final ExplorerManager em = new ExplorerManager();
    
    private boolean cancelled = true;
    private List<Savable> savables;
    
    private JDialog dialog;
    
    private CloseConfirmDialog(Lookup lookup) {
        savables = new ArrayList<Savable>(lookup.lookupAll(Savable.class));
        initManager();
        initComponents();
    }

    private void initManager() {
        em.setRootContext(new AbstractNode(new SavableChildren()));
    }
    
    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();
        if(saveAllButton == source) {
            save();
        } else if(discardAllButton == source) {
            discard();
        } else if(cancelButton == source) {
            cancel();
        }
    }
    
    private void save() {
        Node[] selected = getSelectedNodes();
        try {
            saveNodes(selected);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        } finally {
            reinitDialog();
        }
    }
    
    private Node[] getSelectedNodes() {
        Node[] selected = em.getSelectedNodes();
        if(selected.length > 0)
            return selected;
        return em.getRootContext().getChildren().getNodes();
    }
    
    private void saveNodes(Node[] nodes) throws IOException {
        for(Node node : nodes) {
            Savable s = ((SavableNode) node).savable;
            s.save();
            savables.remove(s);
        }
    }
    
    private void reinitDialog() {
        if(savables.isEmpty()) {
            dialog.dispose();
            cancelled = false;
        } else {
            initManager();
        }
    }
    
    private void discard() {
        Node[] selected = getSelectedNodes();
        discardNodes(selected);
        reinitDialog();
    }
    
    private void discardNodes(Node[] nodes) {
        for(Node node : nodes) {
            Savable s = ((SavableNode) node).savable;
            savables.remove(s);
        }
    }
    
    private void cancel() {
        dialog.dispose();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        savableList = new org.openide.explorer.view.ListView();
        buttonPanel = new javax.swing.JPanel();
        saveAllButton = new javax.swing.JButton();
        discardAllButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        cancelButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
        setLayout(new java.awt.BorderLayout(15, 0));

        savableList.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        add(savableList, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        saveAllButton.setText(org.openide.util.NbBundle.getMessage(CloseConfirmDialog.class, "LBL.CloseConfirmForm.Button.Save")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        buttonPanel.add(saveAllButton, gridBagConstraints);

        discardAllButton.setText(org.openide.util.NbBundle.getMessage(CloseConfirmDialog.class, "LBL.CloseConfirmForm.Button.Discard")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        buttonPanel.add(discardAllButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(filler1, gridBagConstraints);

        cancelButton.setText(org.openide.util.NbBundle.getMessage(CloseConfirmDialog.class, "LBL.CloseConfirmForm.Button.Cancel")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        buttonPanel.add(cancelButton, gridBagConstraints);

        add(buttonPanel, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton discardAllButton;
    private javax.swing.Box.Filler filler1;
    private org.openide.explorer.view.ListView savableList;
    private javax.swing.JButton saveAllButton;
    // End of variables declaration//GEN-END:variables
    
    private class SavableChildren extends Children.Keys<Savable> {

        @Override
        protected void addNotify() {
            setKeys(savables);
        }
        
        @Override
        protected Node[] createNodes(Savable t) {
            return new Node[]{new SavableNode(t)};
        }
    }
    
    private static class SavableNode extends AbstractNode {
        
        private Image img;
        private Savable savable;
        
        private SavableNode(Savable t) {
            super(Children.LEAF, Lookups.singleton(t));
            this.savable = t;
            setDisplayName(t.toString());
            if(t instanceof Icon)
                img = ImageUtilities.icon2Image((Icon) t);
        }

        @Override
        public Image getIcon(int type) {
            if(img != null)
                return img;
            return super.getIcon(type);
        }

        @Override
        public Image getOpenedIcon(int type) {
            return getIcon(type);
        }
    }
}
