package org.jreserve.logging.view;

import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JPopupMenu;
import javax.swing.KeyStroke;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.StyledDocument;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.actions.CopyAction;
import org.openide.actions.DeleteAction;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.util.actions.SystemAction;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.jreserve.logging.view//Logview//EN",
    autostore = false
)
@TopComponent.Description(
    preferredID = "LogviewTopComponent",
    //iconBase="SET/PATH/TO/ICON/HERE", 
    persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(
    mode = "output", 
    openAtStartup = false
)
@ActionID(
    category = "Window", 
    id = "org.jreserve.logging.view.LogviewTopComponent"
)
@ActionReference(
    path = "Menu/Window", 
    position = 400
)
@TopComponent.OpenActionRegistration (
    displayName = "#CTL_LogviewAction",
    preferredID = "LogviewTopComponent"
)
@Messages({
    "CTL_LogviewAction=Show log",
    "CTL_LogviewTopComponent=Log"
})
public final class LogviewTopComponent extends TopComponent {

    private final static String DELETE_ACTION_KEY = "delete";
    private final static String DELETE_KEY = "DELETE";
    
    private static LogviewTopComponent INSTANCE = null;
    
    public static void setViewVisible(boolean visible) {
        if(visible)
            openView();
        else
            closeView();
    }
    
    public static void openView() {
        if(INSTANCE != null && INSTANCE.isOpened())
            return;
        getInstance().open();
    }
    
    private static LogviewTopComponent getInstance() {
        if(INSTANCE == null)
            return new LogviewTopComponent();
        return INSTANCE;
    }
    
    public static void closeView() {
        if(INSTANCE == null || !INSTANCE.isOpened())
            return;
        INSTANCE.close();
    }
    
    static StyledDocument getDocument() {
        return getInstance().jTextPane1.getStyledDocument();
    }
    
    public LogviewTopComponent() {
        setInstance();
        initComponents();
        setName(Bundle.CTL_LogviewTopComponent());
        registerCopyAction();
        registerDeleteAction();
    }
    
    private void setInstance() {
        if(INSTANCE != null)
            throw new IllegalStateException("Not a singleton!");
        INSTANCE = this;
    }
    
    private void registerCopyAction() {
        KeyStroke stroke = KeyStroke.getKeyStroke("control C");
        getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(stroke, DefaultEditorKit.copyAction);
        jTextPane1.getInputMap().put(stroke, DefaultEditorKit.copyAction);
        getActionMap().put(DefaultEditorKit.copyAction, new CopyLogAction());
    }
    
    private void registerDeleteAction() {
        KeyStroke stroke = KeyStroke.getKeyStroke(DELETE_KEY);
        getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(stroke, DELETE_ACTION_KEY);
        jTextPane1.getInputMap().put(stroke, DELETE_ACTION_KEY);
        getActionMap().put(DELETE_ACTION_KEY, new DeleteLogAction());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        jTextPane1.setEditable(false);
        jScrollPane1.setViewportView(jTextPane1);
        jTextPane1.addMouseListener(new LogPopUp());

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private class CopyLogAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            StringSelection text = new StringSelection(getText());
            Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
            cb.setContents(text, null);
        }
        
        private String getText() {
            String txt = jTextPane1.getSelectedText();
            return txt!=null? txt : jTextPane1.getText();
        }
    }
    
    private class DeleteLogAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            jTextPane1.setText(null);
        }
    }
    
    private class LogPopUp extends MouseAdapter {

        @Override
        public void mouseReleased(MouseEvent evt) {
            popupEvent(evt);
        }
        
        @Override
        public void mousePressed(MouseEvent evt) {
            popupEvent(evt);
        }
        
        private void popupEvent(MouseEvent evt) {
            if(evt.isPopupTrigger())
                showPopup(evt.getPoint());
        }
        
        private void showPopup(Point point) {
            JPopupMenu popUp = new JPopupMenu();
            popUp.add(SystemAction.get(CopyAction.class).getMenuPresenter());
            popUp.add(SystemAction.get(DeleteAction.class).getMenuPresenter());
            popUp.show(jTextPane1, point.x, point.y);
        }
    }
}
