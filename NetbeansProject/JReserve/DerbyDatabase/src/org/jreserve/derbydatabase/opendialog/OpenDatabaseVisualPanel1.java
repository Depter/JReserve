package org.jreserve.derbydatabase.opendialog;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jreserve.branding.file.FileChooser;
import org.jreserve.branding.img.Images;
import org.openide.util.NbBundle.Messages;

@Messages({
    "CTL_StepOne=Select database...",
    "CTL_location=Database:",
    "CTL_userName=User name:",
    "CTL_password=Password:",
    "CTL_browse=Browse...",
    "CTL_testingDb=Testing database...",
    "CTL_fileChooserTitle=Select database",
    "ERR_pathEmpty=Field 'Database' is empty!",
    "#0 - location",
    "ERR_fileNotFound=Location '%s' does not exists!",
    "#0 - location",
    "ERR_fileNotDirectory=Location '%s' is not a derby database!"
})
final class OpenDatabaseVisualPanel1 extends JPanel implements DocumentListener {
    
    private ActionListener browseListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            String path = browseDatabase();
            if(path != null)
                dbText.setText(path);
        }
    };

    private OpenDatabaseWizardPanel1 descriptor;
    
    public OpenDatabaseVisualPanel1(OpenDatabaseWizardPanel1 descriptor) {
        initComponents();
        this.descriptor = descriptor;
        checkPath();
    }
    
    private String browseDatabase() {
        File basePath = new File (System.getProperty("netbeans.user"));
        File db = new FileChooser(OpenDatabaseVisualPanel1.class)
            .setTitle(Bundle.CTL_fileChooserTitle())
            .setDefaultWorkingDirectory(basePath)
            .setDirectoriesOnly(true)
            .showOpenDialog();
        return db==null? null : db.getAbsolutePath();
    }

    @Override
    public String getName() {
        return Bundle.CTL_StepOne();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dbLabel = new javax.swing.JLabel();
        dbText = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        userNameLabel = new javax.swing.JLabel();
        userNameText = new javax.swing.JTextField();
        passField = new javax.swing.JPasswordField();
        passLabel = new javax.swing.JLabel();
        pBar = new javax.swing.JProgressBar();
        pBarLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(dbLabel, Bundle.CTL_location());

        dbText.setText(org.openide.util.NbBundle.getMessage(OpenDatabaseVisualPanel1.class, "OpenDatabaseVisualPanel1.dbText.text")); // NOI18N
        dbText.getDocument().addDocumentListener(this);

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, Bundle.CTL_browse());
        browseButton.addActionListener(browseListener);

        org.openide.awt.Mnemonics.setLocalizedText(userNameLabel, Bundle.CTL_userName());

        userNameText.setText(org.openide.util.NbBundle.getMessage(OpenDatabaseVisualPanel1.class, "OpenDatabaseVisualPanel1.userNameText.text")); // NOI18N

        passField.setText(org.openide.util.NbBundle.getMessage(OpenDatabaseVisualPanel1.class, "OpenDatabaseVisualPanel1.passField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(passLabel, Bundle.CTL_password());

        pBar.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(pBarLabel, Bundle.CTL_testingDb());
        pBarLabel.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(errorLabel, org.openide.util.NbBundle.getMessage(OpenDatabaseVisualPanel1.class, "OpenDatabaseVisualPanel1.errorLabel.text")); // NOI18N
        errorLabel.setIcon(Images.ERROR);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(userNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dbLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(passLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dbText)
                            .addComponent(userNameText)
                            .addComponent(passField, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(browseButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pBarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbLabel)
                    .addComponent(dbText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameLabel)
                    .addComponent(userNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 158, Short.MAX_VALUE)
                .addComponent(pBarLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorLabel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel dbLabel;
    private javax.swing.JTextField dbText;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JProgressBar pBar;
    private javax.swing.JLabel pBarLabel;
    private javax.swing.JPasswordField passField;
    private javax.swing.JLabel passLabel;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField userNameText;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent e) {
        checkPath();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        checkPath();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        checkPath();
    }
    
    private void checkPath() {
        boolean isValid = isValidInput();
        errorLabel.setVisible(!isValid);
        descriptor.setValid(isValid);
    }
    
    private boolean isValidInput() {
        String path = getDbPath();
        File file = path==null? null : new File(path);
        boolean isValid = false;
        if(file == null) {
            setErrorText(Bundle.ERR_pathEmpty());
        } else if (!file.exists()) {
            setErrorText(Bundle.ERR_fileNotFound(), file);
        } else if (!file.isDirectory()) {
            setErrorText(Bundle.ERR_fileNotDirectory(), file);
        } else {
            isValid = true;
            errorLabel.setVisible(false);
        }
        return isValid;
    }
    
    private void setErrorText(String format, Object... params) {
        String str = String.format(format, params);
        errorLabel.setText(str);
    }
    
    String getDbPath() {
        return getFieldValue(dbText);
    }
    
    private String getFieldValue(JTextField field) {
        String str = field.getText();
        if(str == null || str.trim().length() == 0)
            return null;
        return str;
    }
    
    void startOpeningDb() {
        pBar.setIndeterminate(true);
        pBar.setVisible(true);
        pBarLabel.setVisible(true);
    }
    
    void stopOpeningDb() {
        pBar.setIndeterminate(false);
        pBar.setVisible(false);
        pBarLabel.setVisible(false);
    }
    
    File getDbFile() {
        String path = getDbPath();
        return path == null? null : new File(path);
    }
    
    String getUserName() {
        return getFieldValue(userNameText);
    }
    
    String getPassword() {
        char[] pass = passField.getPassword();
        if(pass == null || pass.length==0)
            return null;
        return new String(pass);
    }
}
