format 76
"lang" // src::java::lang
  revision 1
  modified_by 2 "Peti"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "c:/Program Files/Java/jdk1.7.0_03/src/java/lang/"
  java_package "java.lang"
  classview 128130 "lang"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 128130 "String"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>String</code> class represents character strings. All
string literals in Java programs, such as <code>\"abc\"</code>, are
implemented as instances of this class.
<p>
Strings are constant; their values cannot be changed after they
are created. String buffers support mutable strings.
Because String objects are immutable they can be shared. For example:
<p><blockquote><pre>
    String str = \"abc\";
</pre></blockquote><p>
is equivalent to:
<p><blockquote><pre>
    char data[] = {'a', 'b', 'c'};
    String str = new String(data);
</pre></blockquote><p>
Here are some more examples of how strings can be used:
<p><blockquote><pre>
    System.out.println(\"abc\");
    String cde = \"cde\";
    System.out.println(\"abc\" + cde);
    String c = \"abc\".substring(2,3);
    String d = cde.substring(1, 2);
</pre></blockquote>
<p>
The class <code>String</code> includes methods for examining
individual characters of the sequence, for comparing strings, for
searching strings, for extracting substrings, and for creating a
copy of a string with all characters translated to uppercase or to
lowercase. Case mapping is based on the Unicode Standard version
specified by the {@link java.lang.Character Character} class.
<p>
The Java language provides special support for the string
concatenation operator (&nbsp;+&nbsp;), and for conversion of
other objects to strings. String concatenation is implemented
through the <code>StringBuilder</code>(or <code>StringBuffer</code>)
class and its <code>append</code> method.
String conversions are implemented through the method
<code>toString</code>, defined by <code>Object</code> and
inherited by all classes in Java. For additional information on
string concatenation and conversion, see Gosling, Joy, and Steele,
<i>The Java Language Specification</i>.

<p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor
or method in this class will cause a {@link NullPointerException} to be
thrown.

<p>A <code>String</code> represents a string in the UTF-16 format
in which <em>supplementary characters</em> are represented by <em>surrogate
pairs</em> (see the section <a href=\"Character.html#unicode\">Unicode
Character Representations</a> in the <code>Character</code> class for
more information).
Index values refer to <code>char</code> code units, so a supplementary
character uses two positions in a <code>String</code>.
<p>The <code>String</code> class provides methods for dealing with
Unicode code points (i.e., characters), in addition to those for
dealing with Unicode code units (i.e., <code>char</code> values).

@author  Lee Boynton
@author  Arthur van Hoff
@author  Martin Buchholz
@author  Ulf Zibis
@see     java.lang.Object#toString()
@see     java.lang.StringBuffer
@see     java.lang.StringBuilder
@see     java.nio.charset.Charset
@since   JDK1.0"
      classrelation 128002 // <realization>
	relation 128002 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 128002 // <realization>
	  b parent class_ref 128258 // Serializable
      end

      classrelation 128130 // <realization>
	relation 128130 -_-|>
	  a public
	    java "${type}<String>"
	    classrelation_ref 128130 // <realization>
	  b parent class_ref 128386 // Comparable
      end

      classrelation 128258 // <realization>
	relation 128258 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 128258 // <realization>
	  b parent class_ref 128514 // CharSequence
      end

      operation 128642 "String"
	public explicit_return_type ""
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a newly created {@code String} object so that it represents
an empty character sequence.  Note that use of this constructor is
unnecessary since Strings are immutable."
      end

      operation 128770 "String"
	public explicit_return_type ""
	nparams 1
	  param inout name "original" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a newly created {@code String} object so that it represents
the same sequence of characters as the argument; in other words, the
newly created string is a copy of the argument string. Unless an
explicit copy of {@code original} is needed, use of this constructor is
unnecessary since Strings are immutable.

@param  original
        A {@code String}"
      end

      operation 128898 "String"
	public explicit_return_type ""
	nparams 1
	  param inout name "value" explicit_type "char"
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new {@code String} so that it represents the sequence of
characters currently contained in the character array argument. The
contents of the character array are copied; subsequent modification of
the character array does not affect the newly created string.

@param  value
        The initial value of the string"
      end

      operation 129026 "String"
	public explicit_return_type ""
	nparams 3
	  param inout name "value" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new {@code String} that contains characters from a subarray
of the character array argument. The {@code offset} argument is the
index of the first character of the subarray and the {@code count}
argument specifies the length of the subarray. The contents of the
subarray are copied; subsequent modification of the character array does
not affect the newly created string.

@param  value
        Array that is the source of characters

@param  offset
        The initial offset

@param  count
        The length

@throws  IndexOutOfBoundsException
         If the {@code offset} and {@code count} arguments index
         characters outside the bounds of the {@code value} array"
      end

      operation 129154 "String"
	public explicit_return_type ""
	nparams 3
	  param inout name "codePoints" explicit_type "int"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new {@code String} that contains characters from a subarray
of the <a href=\"Character.html#unicode\">Unicode code point</a> array
argument.  The {@code offset} argument is the index of the first code
point of the subarray and the {@code count} argument specifies the
length of the subarray.  The contents of the subarray are converted to
{@code char}s; subsequent modification of the {@code int} array does not
affect the newly created string.

@param  codePoints
        Array that is the source of Unicode code points

@param  offset
        The initial offset

@param  count
        The length

@throws  IllegalArgumentException
         If any invalid Unicode code point is found in {@code
         codePoints}

@throws  IndexOutOfBoundsException
         If the {@code offset} and {@code count} arguments index
         characters outside the bounds of the {@code codePoints} array

@since  1.5"
      end

      operation 129282 "String"
	public explicit_return_type ""
	nparams 4
	  param inout name "ascii" explicit_type "byte"
	  param in name "hibyte" explicit_type "int"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Allocates a new {@code String} constructed from a subarray of an array
of 8-bit integer values.

<p> The {@code offset} argument is the index of the first byte of the
subarray, and the {@code count} argument specifies the length of the
subarray.

<p> Each {@code byte} in the subarray is converted to a {@code char} as
specified in the method above.

@deprecated This method does not properly convert bytes into characters.
As of JDK&nbsp;1.1, the preferred way to do this is via the
{@code String} constructors that take a {@link
java.nio.charset.Charset}, charset name, or that use the platform's
default charset.

@param  ascii
        The bytes to be converted to characters

@param  hibyte
        The top 8 bits of each 16-bit Unicode code unit

@param  offset
        The initial offset
@param  count
        The length

@throws  IndexOutOfBoundsException
         If the {@code offset} or {@code count} argument is invalid

@see  #String(byte[], int)
@see  #String(byte[], int, int, java.lang.String)
@see  #String(byte[], int, int, java.nio.charset.Charset)
@see  #String(byte[], int, int)
@see  #String(byte[], java.lang.String)
@see  #String(byte[], java.nio.charset.Charset)
@see  #String(byte[])"
      end

      operation 129410 "String"
	public explicit_return_type ""
	nparams 2
	  param inout name "ascii" explicit_type "byte"
	  param in name "hibyte" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Allocates a new {@code String} containing characters constructed from
an array of 8-bit integer values. Each character <i>c</i>in the
resulting string is constructed from the corresponding component
<i>b</i> in the byte array such that:

<blockquote><pre>
    <b><i>c</i></b> == (char)(((hibyte &amp; 0xff) &lt;&lt; 8)
                        | (<b><i>b</i></b> &amp; 0xff))
</pre></blockquote>

@deprecated  This method does not properly convert bytes into
characters.  As of JDK&nbsp;1.1, the preferred way to do this is via the
{@code String} constructors that take a {@link
java.nio.charset.Charset}, charset name, or that use the platform's
default charset.

@param  ascii
        The bytes to be converted to characters

@param  hibyte
        The top 8 bits of each 16-bit Unicode code unit

@see  #String(byte[], int, int, java.lang.String)
@see  #String(byte[], int, int, java.nio.charset.Charset)
@see  #String(byte[], int, int)
@see  #String(byte[], java.lang.String)
@see  #String(byte[], java.nio.charset.Charset)
@see  #String(byte[])"
      end

      operation 129538 "String"
	public explicit_return_type ""
	nparams 4
	  param inout name "bytes" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param inout name "charsetName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 128770 // UnsupportedEncodingException
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code String} by decoding the specified subarray of
bytes using the specified charset.  The length of the new {@code String}
is a function of the charset, and hence may not be equal to the length
of the subarray.

<p> The behavior of this constructor when the given bytes are not valid
in the given charset is unspecified.  The {@link
java.nio.charset.CharsetDecoder} class should be used when more control
over the decoding process is required.

@param  bytes
        The bytes to be decoded into characters

@param  offset
        The index of the first byte to decode

@param  length
        The number of bytes to decode

@param  charsetName
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@throws  UnsupportedEncodingException
         If the named charset is not supported

@throws  IndexOutOfBoundsException
         If the {@code offset} and {@code length} arguments index
         characters outside the bounds of the {@code bytes} array

@since  JDK1.1"
      end

      operation 129666 "String"
	public explicit_return_type ""
	nparams 4
	  param inout name "bytes" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param inout name "charset" type class_ref 128898 // Charset
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code String} by decoding the specified subarray of
bytes using the specified {@linkplain java.nio.charset.Charset charset}.
The length of the new {@code String} is a function of the charset, and
hence may not be equal to the length of the subarray.

<p> This method always replaces malformed-input and unmappable-character
sequences with this charset's default replacement string.  The {@link
java.nio.charset.CharsetDecoder} class should be used when more control
over the decoding process is required.

@param  bytes
        The bytes to be decoded into characters

@param  offset
        The index of the first byte to decode

@param  length
        The number of bytes to decode

@param  charset
        The {@linkplain java.nio.charset.Charset charset} to be used to
        decode the {@code bytes}

@throws  IndexOutOfBoundsException
         If the {@code offset} and {@code length} arguments index
         characters outside the bounds of the {@code bytes} array

@since  1.6"
      end

      operation 129794 "String"
	public explicit_return_type ""
	nparams 2
	  param inout name "bytes" explicit_type "byte"
	  param inout name "charsetName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 128770 // UnsupportedEncodingException
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code String} by decoding the specified array of bytes
using the specified {@linkplain java.nio.charset.Charset charset}.  The
length of the new {@code String} is a function of the charset, and hence
may not be equal to the length of the byte array.

<p> The behavior of this constructor when the given bytes are not valid
in the given charset is unspecified.  The {@link
java.nio.charset.CharsetDecoder} class should be used when more control
over the decoding process is required.

@param  bytes
        The bytes to be decoded into characters

@param  charsetName
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@throws  UnsupportedEncodingException
         If the named charset is not supported

@since  JDK1.1"
      end

      operation 129922 "String"
	public explicit_return_type ""
	nparams 2
	  param inout name "bytes" explicit_type "byte"
	  param inout name "charset" type class_ref 128898 // Charset
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code String} by decoding the specified array of
bytes using the specified {@linkplain java.nio.charset.Charset charset}.
The length of the new {@code String} is a function of the charset, and
hence may not be equal to the length of the byte array.

<p> This method always replaces malformed-input and unmappable-character
sequences with this charset's default replacement string.  The {@link
java.nio.charset.CharsetDecoder} class should be used when more control
over the decoding process is required.

@param  bytes
        The bytes to be decoded into characters

@param  charset
        The {@linkplain java.nio.charset.Charset charset} to be used to
        decode the {@code bytes}

@since  1.6"
      end

      operation 130050 "String"
	public explicit_return_type ""
	nparams 3
	  param inout name "bytes" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code String} by decoding the specified subarray of
bytes using the platform's default charset.  The length of the new
{@code String} is a function of the charset, and hence may not be equal
to the length of the subarray.

<p> The behavior of this constructor when the given bytes are not valid
in the default charset is unspecified.  The {@link
java.nio.charset.CharsetDecoder} class should be used when more control
over the decoding process is required.

@param  bytes
        The bytes to be decoded into characters

@param  offset
        The index of the first byte to decode

@param  length
        The number of bytes to decode

@throws  IndexOutOfBoundsException
         If the {@code offset} and the {@code length} arguments index
         characters outside the bounds of the {@code bytes} array

@since  JDK1.1"
      end

      operation 130178 "String"
	public explicit_return_type ""
	nparams 1
	  param inout name "bytes" explicit_type "byte"
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code String} by decoding the specified array of bytes
using the platform's default charset.  The length of the new {@code
String} is a function of the charset, and hence may not be equal to the
length of the byte array.

<p> The behavior of this constructor when the given bytes are not valid
in the default charset is unspecified.  The {@link
java.nio.charset.CharsetDecoder} class should be used when more control
over the decoding process is required.

@param  bytes
        The bytes to be decoded into characters

@since  JDK1.1"
      end

      operation 130306 "String"
	public explicit_return_type ""
	nparams 1
	  param inout name "buffer" type class_ref 129026 // StringBuffer
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new string that contains the sequence of characters
currently contained in the string buffer argument. The contents of the
string buffer are copied; subsequent modification of the string buffer
does not affect the newly created string.

@param  buffer
        A {@code StringBuffer}"
      end

      operation 130434 "String"
	public explicit_return_type ""
	nparams 1
	  param inout name "builder" type class_ref 129154 // StringBuilder
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new string that contains the sequence of characters
currently contained in the string builder argument. The contents of the
string builder are copied; subsequent modification of the string builder
does not affect the newly created string.

<p> This constructor is provided to ease migration to {@code
StringBuilder}. Obtaining a string from a string builder via the {@code
toString} method is likely to run faster and is generally preferred.

@param   builder
         A {@code StringBuilder}

@since  1.5"
      end

      operation 130562 "String"
	package explicit_return_type ""
	nparams 3
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param inout name "value" explicit_type "char"
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package private constructor which shares value array for speed."
      end

      operation 130690 "length"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of this string.
The length is equal to the number of <a href=\"Character.html#unicode\">Unicode
code units</a> in the string.

@return  the length of the sequence of characters represented by this
         object."
      end

      operation 130818 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if, and only if, {@link #length()} is <tt>0</tt>.

@return <tt>true</tt> if {@link #length()} is <tt>0</tt>, otherwise
<tt>false</tt>

@since 1.6"
      end

      operation 130946 "charAt"
	public explicit_return_type "char"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>char</code> value at the
specified index. An index ranges from <code>0</code> to
<code>length() - 1</code>. The first <code>char</code> value of the sequence
is at index <code>0</code>, the next at index <code>1</code>,
and so on, as for array indexing.

<p>If the <code>char</code> value specified by the index is a
<a href=\"Character.html#unicode\">surrogate</a>, the surrogate
value is returned.

@param      index   the index of the <code>char</code> value.
@return     the <code>char</code> value at the specified index of this string.
            The first <code>char</code> value is at index <code>0</code>.
@exception  IndexOutOfBoundsException  if the <code>index</code>
            argument is negative or not less than the length of this
            string."
      end

      operation 131074 "codePointAt"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character (Unicode code point) at the specified
index. The index refers to <code>char</code> values
(Unicode code units) and ranges from <code>0</code> to
{@link #length()}<code> - 1</code>.

<p> If the <code>char</code> value specified at the given index
is in the high-surrogate range, the following index is less
than the length of this <code>String</code>, and the
<code>char</code> value at the following index is in the
low-surrogate range, then the supplementary code point
corresponding to this surrogate pair is returned. Otherwise,
the <code>char</code> value at the given index is returned.

@param      index the index to the <code>char</code> values
@return     the code point value of the character at the
            <code>index</code>
@exception  IndexOutOfBoundsException  if the <code>index</code>
            argument is negative or not less than the length of this
            string.
@since      1.5"
      end

      operation 131202 "codePointBefore"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character (Unicode code point) before the specified
index. The index refers to <code>char</code> values
(Unicode code units) and ranges from <code>1</code> to {@link
CharSequence#length() length}.

<p> If the <code>char</code> value at <code>(index - 1)</code>
is in the low-surrogate range, <code>(index - 2)</code> is not
negative, and the <code>char</code> value at <code>(index -
2)</code> is in the high-surrogate range, then the
supplementary code point value of the surrogate pair is
returned. If the <code>char</code> value at <code>index -
1</code> is an unpaired low-surrogate or a high-surrogate, the
surrogate value is returned.

@param     index the index following the code point that should be returned
@return    the Unicode code point value before the given index.
@exception IndexOutOfBoundsException if the <code>index</code>
           argument is less than 1 or greater than the length
           of this string.
@since     1.5"
      end

      operation 131330 "codePointCount"
	public explicit_return_type "int"
	nparams 2
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of Unicode code points in the specified text
range of this <code>String</code>. The text range begins at the
specified <code>beginIndex</code> and extends to the
<code>char</code> at index <code>endIndex - 1</code>. Thus the
length (in <code>char</code>s) of the text range is
<code>endIndex-beginIndex</code>. Unpaired surrogates within
the text range count as one code point each.

@param beginIndex the index to the first <code>char</code> of
the text range.
@param endIndex the index after the last <code>char</code> of
the text range.
@return the number of Unicode code points in the specified text
range
@exception IndexOutOfBoundsException if the
<code>beginIndex</code> is negative, or <code>endIndex</code>
is larger than the length of this <code>String</code>, or
<code>beginIndex</code> is larger than <code>endIndex</code>.
@since  1.5"
      end

      operation 131458 "offsetByCodePoints"
	public explicit_return_type "int"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "codePointOffset" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this <code>String</code> that is
offset from the given <code>index</code> by
<code>codePointOffset</code> code points. Unpaired surrogates
within the text range given by <code>index</code> and
<code>codePointOffset</code> count as one code point each.

@param index the index to be offset
@param codePointOffset the offset in code points
@return the index within this <code>String</code>
@exception IndexOutOfBoundsException if <code>index</code>
  is negative or larger then the length of this
  <code>String</code>, or if <code>codePointOffset</code> is positive
  and the substring starting with <code>index</code> has fewer
  than <code>codePointOffset</code> code points,
  or if <code>codePointOffset</code> is negative and the substring
  before <code>index</code> has fewer than the absolute value
  of <code>codePointOffset</code> code points.
@since 1.5"
      end

      operation 131586 "getChars"
	package explicit_return_type "void"
	nparams 2
	  param inout name "dst" explicit_type "char"
	  param in name "dstBegin" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy characters from this string into dst starting at dstBegin.
This method doesn't perform any range checking."
      end

      operation 131714 "getChars"
	public explicit_return_type "void"
	nparams 4
	  param in name "srcBegin" explicit_type "int"
	  param in name "srcEnd" explicit_type "int"
	  param inout name "dst" explicit_type "char"
	  param in name "dstBegin" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies characters from this string into the destination character
array.
<p>
The first character to be copied is at index <code>srcBegin</code>;
the last character to be copied is at index <code>srcEnd-1</code>
(thus the total number of characters to be copied is
<code>srcEnd-srcBegin</code>). The characters are copied into the
subarray of <code>dst</code> starting at index <code>dstBegin</code>
and ending at index:
<p><blockquote><pre>
    dstbegin + (srcEnd-srcBegin) - 1
</pre></blockquote>

@param      srcBegin   index of the first character in the string
                       to copy.
@param      srcEnd     index after the last character in the string
                       to copy.
@param      dst        the destination array.
@param      dstBegin   the start offset in the destination array.
@exception IndexOutOfBoundsException If any of the following
           is true:
           <ul><li><code>srcBegin</code> is negative.
           <li><code>srcBegin</code> is greater than <code>srcEnd</code>
           <li><code>srcEnd</code> is greater than the length of this
               string
           <li><code>dstBegin</code> is negative
           <li><code>dstBegin+(srcEnd-srcBegin)</code> is larger than
               <code>dst.length</code></ul>"
      end

      operation 131842 "getBytes"
	public explicit_return_type "void"
	nparams 4
	  param in name "srcBegin" explicit_type "int"
	  param in name "srcEnd" explicit_type "int"
	  param inout name "dst" explicit_type "byte"
	  param in name "dstBegin" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Copies characters from this string into the destination byte array. Each
byte receives the 8 low-order bits of the corresponding character. The
eight high-order bits of each character are not copied and do not
participate in the transfer in any way.

<p> The first character to be copied is at index {@code srcBegin}; the
last character to be copied is at index {@code srcEnd-1}.  The total
number of characters to be copied is {@code srcEnd-srcBegin}. The
characters, converted to bytes, are copied into the subarray of {@code
dst} starting at index {@code dstBegin} and ending at index:

<blockquote><pre>
    dstbegin + (srcEnd-srcBegin) - 1
</pre></blockquote>

@deprecated  This method does not properly convert characters into
bytes.  As of JDK&nbsp;1.1, the preferred way to do this is via the
{@link #getBytes()} method, which uses the platform's default charset.

@param  srcBegin
        Index of the first character in the string to copy

@param  srcEnd
        Index after the last character in the string to copy

@param  dst
        The destination array

@param  dstBegin
        The start offset in the destination array

@throws  IndexOutOfBoundsException
         If any of the following is true:
         <ul>
           <li> {@code srcBegin} is negative
           <li> {@code srcBegin} is greater than {@code srcEnd}
           <li> {@code srcEnd} is greater than the length of this String
           <li> {@code dstBegin} is negative
           <li> {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code
                dst.length}
         </ul>"
      end

      operation 131970 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "charsetName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 128770 // UnsupportedEncodingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes this {@code String} into a sequence of bytes using the named
charset, storing the result into a new byte array.

<p> The behavior of this method when this string cannot be encoded in
the given charset is unspecified.  The {@link
java.nio.charset.CharsetEncoder} class should be used when more control
over the encoding process is required.

@param  charsetName
        The name of a supported {@linkplain java.nio.charset.Charset
        charset}

@return  The resultant byte array

@throws  UnsupportedEncodingException
         If the named charset is not supported

@since  JDK1.1"
      end

      operation 132098 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "charset" type class_ref 128898 // Charset
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes this {@code String} into a sequence of bytes using the given
{@linkplain java.nio.charset.Charset charset}, storing the result into a
new byte array.

<p> This method always replaces malformed-input and unmappable-character
sequences with this charset's default replacement byte array.  The
{@link java.nio.charset.CharsetEncoder} class should be used when more
control over the encoding process is required.

@param  charset
        The {@linkplain java.nio.charset.Charset} to be used to encode
        the {@code String}

@return  The resultant byte array

@since  1.6"
      end

      operation 132226 "getBytes"
	public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes this {@code String} into a sequence of bytes using the
platform's default charset, storing the result into a new byte array.

<p> The behavior of this method when this string cannot be encoded in
the default charset is unspecified.  The {@link
java.nio.charset.CharsetEncoder} class should be used when more control
over the encoding process is required.

@return  The resultant byte array

@since      JDK1.1"
      end

      operation 132354 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "anObject" type class_ref 129282 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this string to the specified object.  The result is {@code
true} if and only if the argument is not {@code null} and is a {@code
String} object that represents the same sequence of characters as this
object.

@param  anObject
        The object to compare this {@code String} against

@return  {@code true} if the given object represents a {@code String}
         equivalent to this string, {@code false} otherwise

@see  #compareTo(String)
@see  #equalsIgnoreCase(String)"
      end

      operation 132482 "contentEquals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "sb" type class_ref 129026 // StringBuffer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this string to the specified {@code StringBuffer}.  The result
is {@code true} if and only if this {@code String} represents the same
sequence of characters as the specified {@code StringBuffer}.

@param  sb
        The {@code StringBuffer} to compare this {@code String} against

@return  {@code true} if this {@code String} represents the same
         sequence of characters as the specified {@code StringBuffer},
         {@code false} otherwise

@since  1.4"
      end

      operation 132610 "contentEquals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "cs" type class_ref 128514 // CharSequence
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this string to the specified {@code CharSequence}.  The result
is {@code true} if and only if this {@code String} represents the same
sequence of char values as the specified sequence.

@param  cs
        The sequence to compare this {@code String} against

@return  {@code true} if this {@code String} represents the same
         sequence of char values as the specified sequence, {@code
         false} otherwise

@since  1.5"
      end

      operation 132738 "equalsIgnoreCase"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "anotherString" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this {@code String} to another {@code String}, ignoring case
considerations.  Two strings are considered equal ignoring case if they
are of the same length and corresponding characters in the two strings
are equal ignoring case.

<p> Two characters {@code c1} and {@code c2} are considered the same
ignoring case if at least one of the following is true:
<ul>
  <li> The two characters are the same (as compared by the
       {@code ==} operator)
  <li> Applying the method {@link
       java.lang.Character#toUpperCase(char)} to each character
       produces the same result
  <li> Applying the method {@link
       java.lang.Character#toLowerCase(char)} to each character
       produces the same result
</ul>

@param  anotherString
        The {@code String} to compare this {@code String} against

@return  {@code true} if the argument is not {@code null} and it
         represents an equivalent {@code String} ignoring case; {@code
         false} otherwise

@see  #equals(Object)"
      end

      operation 132866 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "anotherString" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two strings lexicographically.
The comparison is based on the Unicode value of each character in
the strings. The character sequence represented by this
<code>String</code> object is compared lexicographically to the
character sequence represented by the argument string. The result is
a negative integer if this <code>String</code> object
lexicographically precedes the argument string. The result is a
positive integer if this <code>String</code> object lexicographically
follows the argument string. The result is zero if the strings
are equal; <code>compareTo</code> returns <code>0</code> exactly when
the {@link #equals(Object)} method would return <code>true</code>.
<p>
This is the definition of lexicographic ordering. If two strings are
different, then either they have different characters at some index
that is a valid index for both strings, or their lengths are different,
or both. If they have different characters at one or more index
positions, let <i>k</i> be the smallest such index; then the string
whose character at position <i>k</i> has the smaller value, as
determined by using the &lt; operator, lexicographically precedes the
other string. In this case, <code>compareTo</code> returns the
difference of the two character values at position <code>k</code> in
the two string -- that is, the value:
<blockquote><pre>
this.charAt(k)-anotherString.charAt(k)
</pre></blockquote>
If there is no index position at which they differ, then the shorter
string lexicographically precedes the longer string. In this case,
<code>compareTo</code> returns the difference of the lengths of the
strings -- that is, the value:
<blockquote><pre>
this.length()-anotherString.length()
</pre></blockquote>

@param   anotherString   the <code>String</code> to be compared.
@return  the value <code>0</code> if the argument string is equal to
         this string; a value less than <code>0</code> if this string
         is lexicographically less than the string argument; and a
         value greater than <code>0</code> if this string is
         lexicographically greater than the string argument."
      end

      classrelation 128386 // CASE_INSENSITIVE_ORDER (<unidirectional association>)
	relation 128386 --->
	  a role_name "CASE_INSENSITIVE_ORDER" init_value " new CaseInsensitiveComparator()" class_relation const_relation public
	    comment "
A Comparator that orders <code>String</code> objects as by
<code>compareToIgnoreCase</code>. This comparator is serializable.
<p>
Note that this Comparator does <em>not</em> take locale into account,
and will result in an unsatisfactory ordering for certain locales.
The java.text package provides <em>Collators</em> to allow
locale-sensitive ordering.

@see     java.text.Collator#compare(String, String)
@since   1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 128386 // CASE_INSENSITIVE_ORDER (<unidirectional association>)
	  b parent class_ref 129410 // Comparator
      end

      class 129538 "CaseInsensitiveComparator"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 128514 // <realization>
	  relation 128514 -_-|>
	    a public
	      java "${type}<String>"
	      classrelation_ref 128514 // <realization>
	    b parent class_ref 129410 // Comparator
	end

	classrelation 128642 // <realization>
	  relation 128642 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 128642 // <realization>
	    b parent class_ref 128258 // Serializable
	end

	operation 133250 "compare"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "s1" type class_ref 128130 // String
	    param inout name "s2" type class_ref 128130 // String
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 133378 "compareToIgnoreCase"
	public explicit_return_type "int"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two strings lexicographically, ignoring case
differences. This method returns an integer whose sign is that of
calling <code>compareTo</code> with normalized versions of the strings
where case differences have been eliminated by calling
<code>Character.toLowerCase(Character.toUpperCase(character))</code> on
each character.
<p>
Note that this method does <em>not</em> take locale into account,
and will result in an unsatisfactory ordering for certain locales.
The java.text package provides <em>collators</em> to allow
locale-sensitive ordering.

@param   str   the <code>String</code> to be compared.
@return  a negative integer, zero, or a positive integer as the
         specified String is greater than, equal to, or less
         than this String, ignoring case considerations.
@see     java.text.Collator#compare(String, String)
@since   1.2"
      end

      operation 133506 "regionMatches"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "toffset" explicit_type "int"
	  param inout name "other" type class_ref 128130 // String
	  param in name "ooffset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if two string regions are equal.
<p>
A substring of this <tt>String</tt> object is compared to a substring
of the argument other. The result is true if these substrings
represent identical character sequences. The substring of this
<tt>String</tt> object to be compared begins at index <tt>toffset</tt>
and has length <tt>len</tt>. The substring of other to be compared
begins at index <tt>ooffset</tt> and has length <tt>len</tt>. The
result is <tt>false</tt> if and only if at least one of the following
is true:
<ul><li><tt>toffset</tt> is negative.
<li><tt>ooffset</tt> is negative.
<li><tt>toffset+len</tt> is greater than the length of this
<tt>String</tt> object.
<li><tt>ooffset+len</tt> is greater than the length of the other
argument.
<li>There is some nonnegative integer <i>k</i> less than <tt>len</tt>
such that:
<tt>this.charAt(toffset+<i>k</i>)&nbsp;!=&nbsp;other.charAt(ooffset+<i>k</i>)</tt>
</ul>

@param   toffset   the starting offset of the subregion in this string.
@param   other     the string argument.
@param   ooffset   the starting offset of the subregion in the string
                   argument.
@param   len       the number of characters to compare.
@return  <code>true</code> if the specified subregion of this string
         exactly matches the specified subregion of the string argument;
         <code>false</code> otherwise."
      end

      operation 133634 "regionMatches"
	public explicit_return_type "boolean"
	nparams 5
	  param inout name "ignoreCase" explicit_type "boolean"
	  param in name "toffset" explicit_type "int"
	  param inout name "other" type class_ref 128130 // String
	  param in name "ooffset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if two string regions are equal.
<p>
A substring of this <tt>String</tt> object is compared to a substring
of the argument <tt>other</tt>. The result is <tt>true</tt> if these
substrings represent character sequences that are the same, ignoring
case if and only if <tt>ignoreCase</tt> is true. The substring of
this <tt>String</tt> object to be compared begins at index
<tt>toffset</tt> and has length <tt>len</tt>. The substring of
<tt>other</tt> to be compared begins at index <tt>ooffset</tt> and
has length <tt>len</tt>. The result is <tt>false</tt> if and only if
at least one of the following is true:
<ul><li><tt>toffset</tt> is negative.
<li><tt>ooffset</tt> is negative.
<li><tt>toffset+len</tt> is greater than the length of this
<tt>String</tt> object.
<li><tt>ooffset+len</tt> is greater than the length of the other
argument.
<li><tt>ignoreCase</tt> is <tt>false</tt> and there is some nonnegative
integer <i>k</i> less than <tt>len</tt> such that:
<blockquote><pre>
this.charAt(toffset+k) != other.charAt(ooffset+k)
</pre></blockquote>
<li><tt>ignoreCase</tt> is <tt>true</tt> and there is some nonnegative
integer <i>k</i> less than <tt>len</tt> such that:
<blockquote><pre>
Character.toLowerCase(this.charAt(toffset+k)) !=
Character.toLowerCase(other.charAt(ooffset+k))
</pre></blockquote>
and:
<blockquote><pre>
Character.toUpperCase(this.charAt(toffset+k)) !=
        Character.toUpperCase(other.charAt(ooffset+k))
</pre></blockquote>
</ul>

@param   ignoreCase   if <code>true</code>, ignore case when comparing
                      characters.
@param   toffset      the starting offset of the subregion in this
                      string.
@param   other        the string argument.
@param   ooffset      the starting offset of the subregion in the string
                      argument.
@param   len          the number of characters to compare.
@return  <code>true</code> if the specified subregion of this string
         matches the specified subregion of the string argument;
         <code>false</code> otherwise. Whether the matching is exact
         or case insensitive depends on the <code>ignoreCase</code>
         argument."
      end

      operation 133762 "startsWith"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param in name "toffset" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the substring of this string beginning at the
specified index starts with the specified prefix.

@param   prefix    the prefix.
@param   toffset   where to begin looking in this string.
@return  <code>true</code> if the character sequence represented by the
         argument is a prefix of the substring of this object starting
         at index <code>toffset</code>; <code>false</code> otherwise.
         The result is <code>false</code> if <code>toffset</code> is
         negative or greater than the length of this
         <code>String</code> object; otherwise the result is the same
         as the result of the expression
         <pre>
         this.substring(toffset).startsWith(prefix)
         </pre>"
      end

      operation 133890 "startsWith"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this string starts with the specified prefix.

@param   prefix   the prefix.
@return  <code>true</code> if the character sequence represented by the
         argument is a prefix of the character sequence represented by
         this string; <code>false</code> otherwise.
         Note also that <code>true</code> will be returned if the
         argument is an empty string or is equal to this
         <code>String</code> object as determined by the
         {@link #equals(Object)} method.
@since   1. 0"
      end

      operation 134018 "endsWith"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "suffix" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this string ends with the specified suffix.

@param   suffix   the suffix.
@return  <code>true</code> if the character sequence represented by the
         argument is a suffix of the character sequence represented by
         this object; <code>false</code> otherwise. Note that the
         result will be <code>true</code> if the argument is the
         empty string or is equal to this <code>String</code> object
         as determined by the {@link #equals(Object)} method."
      end

      operation 134146 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this string. The hash code for a
<code>String</code> object is computed as
<blockquote><pre>
s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
</pre></blockquote>
using <code>int</code> arithmetic, where <code>s[i]</code> is the
<i>i</i>th character of the string, <code>n</code> is the length of
the string, and <code>^</code> indicates exponentiation.
(The hash value of the empty string is zero.)

@return  a hash code value for this object."
      end

      operation 134274 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the first occurrence of
the specified character. If a character with value
<code>ch</code> occurs in the character sequence represented by
this <code>String</code> object, then the index (in Unicode
code units) of the first such occurrence is returned. For
values of <code>ch</code> in the range from 0 to 0xFFFF
(inclusive), this is the smallest value <i>k</i> such that:
<blockquote><pre>
this.charAt(<i>k</i>) == ch
</pre></blockquote>
is true. For other values of <code>ch</code>, it is the
smallest value <i>k</i> such that:
<blockquote><pre>
this.codePointAt(<i>k</i>) == ch
</pre></blockquote>
is true. In either case, if no such character occurs in this
string, then <code>-1</code> is returned.

@param   ch   a character (Unicode code point).
@return  the index of the first occurrence of the character in the
         character sequence represented by this object, or
         <code>-1</code> if the character does not occur."
      end

      operation 134402 "indexOf"
	public explicit_return_type "int"
	nparams 2
	  param in name "ch" explicit_type "int"
	  param in name "fromIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the first occurrence of the
specified character, starting the search at the specified index.
<p>
If a character with value <code>ch</code> occurs in the
character sequence represented by this <code>String</code>
object at an index no smaller than <code>fromIndex</code>, then
the index of the first such occurrence is returned. For values
of <code>ch</code> in the range from 0 to 0xFFFF (inclusive),
this is the smallest value <i>k</i> such that:
<blockquote><pre>
(this.charAt(<i>k</i>) == ch) && (<i>k</i> &gt;= fromIndex)
</pre></blockquote>
is true. For other values of <code>ch</code>, it is the
smallest value <i>k</i> such that:
<blockquote><pre>
(this.codePointAt(<i>k</i>) == ch) && (<i>k</i> &gt;= fromIndex)
</pre></blockquote>
is true. In either case, if no such character occurs in this
string at or after position <code>fromIndex</code>, then
<code>-1</code> is returned.

<p>
There is no restriction on the value of <code>fromIndex</code>. If it
is negative, it has the same effect as if it were zero: this entire
string may be searched. If it is greater than the length of this
string, it has the same effect as if it were equal to the length of
this string: <code>-1</code> is returned.

<p>All indices are specified in <code>char</code> values
(Unicode code units).

@param   ch          a character (Unicode code point).
@param   fromIndex   the index to start the search from.
@return  the index of the first occurrence of the character in the
         character sequence represented by this object that is greater
         than or equal to <code>fromIndex</code>, or <code>-1</code>
         if the character does not occur."
      end

      operation 134530 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the last occurrence of
the specified character. For values of <code>ch</code> in the
range from 0 to 0xFFFF (inclusive), the index (in Unicode code
units) returned is the largest value <i>k</i> such that:
<blockquote><pre>
this.charAt(<i>k</i>) == ch
</pre></blockquote>
is true. For other values of <code>ch</code>, it is the
largest value <i>k</i> such that:
<blockquote><pre>
this.codePointAt(<i>k</i>) == ch
</pre></blockquote>
is true.  In either case, if no such character occurs in this
string, then <code>-1</code> is returned.  The
<code>String</code> is searched backwards starting at the last
character.

@param   ch   a character (Unicode code point).
@return  the index of the last occurrence of the character in the
         character sequence represented by this object, or
         <code>-1</code> if the character does not occur."
      end

      operation 134658 "lastIndexOf"
	public explicit_return_type "int"
	nparams 2
	  param in name "ch" explicit_type "int"
	  param in name "fromIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the last occurrence of
the specified character, searching backward starting at the
specified index. For values of <code>ch</code> in the range
from 0 to 0xFFFF (inclusive), the index returned is the largest
value <i>k</i> such that:
<blockquote><pre>
(this.charAt(<i>k</i>) == ch) && (<i>k</i> &lt;= fromIndex)
</pre></blockquote>
is true. For other values of <code>ch</code>, it is the
largest value <i>k</i> such that:
<blockquote><pre>
(this.codePointAt(<i>k</i>) == ch) && (<i>k</i> &lt;= fromIndex)
</pre></blockquote>
is true. In either case, if no such character occurs in this
string at or before position <code>fromIndex</code>, then
<code>-1</code> is returned.

<p>All indices are specified in <code>char</code> values
(Unicode code units).

@param   ch          a character (Unicode code point).
@param   fromIndex   the index to start the search from. There is no
         restriction on the value of <code>fromIndex</code>. If it is
         greater than or equal to the length of this string, it has
         the same effect as if it were equal to one less than the
         length of this string: this entire string may be searched.
         If it is negative, it has the same effect as if it were -1:
         -1 is returned.
@return  the index of the last occurrence of the character in the
         character sequence represented by this object that is less
         than or equal to <code>fromIndex</code>, or <code>-1</code>
         if the character does not occur before that point."
      end

      operation 134786 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the first occurrence of the
specified substring.

<p>The returned index is the smallest value <i>k</i> for which:
<blockquote><pre>
this.startsWith(str, <i>k</i>)
</pre></blockquote>
If no such value of <i>k</i> exists, then {@code -1} is returned.

@param   str   the substring to search for.
@return  the index of the first occurrence of the specified substring,
         or {@code -1} if there is no such occurrence."
      end

      operation 134914 "indexOf"
	public explicit_return_type "int"
	nparams 2
	  param inout name "str" type class_ref 128130 // String
	  param in name "fromIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the first occurrence of the
specified substring, starting at the specified index.

<p>The returned index is the smallest value <i>k</i> for which:
<blockquote><pre>
<i>k</i> &gt;= fromIndex && this.startsWith(str, <i>k</i>)
</pre></blockquote>
If no such value of <i>k</i> exists, then {@code -1} is returned.

@param   str         the substring to search for.
@param   fromIndex   the index from which to start the search.
@return  the index of the first occurrence of the specified substring,
         starting at the specified index,
         or {@code -1} if there is no such occurrence."
      end

      operation 135042 "indexOf"
	class_operation package explicit_return_type "int"
	nparams 7
	  param inout name "source" explicit_type "char"
	  param in name "sourceOffset" explicit_type "int"
	  param in name "sourceCount" explicit_type "int"
	  param inout name "target" explicit_type "char"
	  param in name "targetOffset" explicit_type "int"
	  param in name "targetCount" explicit_type "int"
	  param in name "fromIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Code shared by String and StringBuffer to do searches. The
source is the character array being searched, and the target
is the string being searched for.

@param   source       the characters being searched.
@param   sourceOffset offset of the source string.
@param   sourceCount  count of the source string.
@param   target       the characters being searched for.
@param   targetOffset offset of the target string.
@param   targetCount  count of the target string.
@param   fromIndex    the index to begin searching from."
      end

      operation 135170 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the last occurrence of the
specified substring.  The last occurrence of the empty string \"\"
is considered to occur at the index value {@code this.length()}.

<p>The returned index is the largest value <i>k</i> for which:
<blockquote><pre>
this.startsWith(str, <i>k</i>)
</pre></blockquote>
If no such value of <i>k</i> exists, then {@code -1} is returned.

@param   str   the substring to search for.
@return  the index of the last occurrence of the specified substring,
         or {@code -1} if there is no such occurrence."
      end

      operation 135298 "lastIndexOf"
	public explicit_return_type "int"
	nparams 2
	  param inout name "str" type class_ref 128130 // String
	  param in name "fromIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the last occurrence of the
specified substring, searching backward starting at the specified index.

<p>The returned index is the largest value <i>k</i> for which:
<blockquote><pre>
<i>k</i> &lt;= fromIndex && this.startsWith(str, <i>k</i>)
</pre></blockquote>
If no such value of <i>k</i> exists, then {@code -1} is returned.

@param   str         the substring to search for.
@param   fromIndex   the index to start the search from.
@return  the index of the last occurrence of the specified substring,
         searching backward from the specified index,
         or {@code -1} if there is no such occurrence."
      end

      operation 135426 "lastIndexOf"
	class_operation package explicit_return_type "int"
	nparams 7
	  param inout name "source" explicit_type "char"
	  param in name "sourceOffset" explicit_type "int"
	  param in name "sourceCount" explicit_type "int"
	  param inout name "target" explicit_type "char"
	  param in name "targetOffset" explicit_type "int"
	  param in name "targetCount" explicit_type "int"
	  param in name "fromIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Code shared by String and StringBuffer to do searches. The
source is the character array being searched, and the target
is the string being searched for.

@param   source       the characters being searched.
@param   sourceOffset offset of the source string.
@param   sourceCount  count of the source string.
@param   target       the characters being searched for.
@param   targetOffset offset of the target string.
@param   targetCount  count of the target string.
@param   fromIndex    the index to begin searching from."
      end

      operation 135554 "substring"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "beginIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new string that is a substring of this string. The
substring begins with the character at the specified index and
extends to the end of this string. <p>
Examples:
<blockquote><pre>
\"unhappy\".substring(2) returns \"happy\"
\"Harbison\".substring(3) returns \"bison\"
\"emptiness\".substring(9) returns \"\" (an empty string)
</pre></blockquote>

@param      beginIndex   the beginning index, inclusive.
@return     the specified substring.
@exception  IndexOutOfBoundsException  if
            <code>beginIndex</code> is negative or larger than the
            length of this <code>String</code> object."
      end

      operation 135682 "substring"
	public return_type class_ref 128130 // String
	nparams 2
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new string that is a substring of this string. The
substring begins at the specified <code>beginIndex</code> and
extends to the character at index <code>endIndex - 1</code>.
Thus the length of the substring is <code>endIndex-beginIndex</code>.
<p>
Examples:
<blockquote><pre>
\"hamburger\".substring(4, 8) returns \"urge\"
\"smiles\".substring(1, 5) returns \"mile\"
</pre></blockquote>

@param      beginIndex   the beginning index, inclusive.
@param      endIndex     the ending index, exclusive.
@return     the specified substring.
@exception  IndexOutOfBoundsException  if the
            <code>beginIndex</code> is negative, or
            <code>endIndex</code> is larger than the length of
            this <code>String</code> object, or
            <code>beginIndex</code> is larger than
            <code>endIndex</code>."
      end

      operation 135810 "subSequence"
	public return_type class_ref 128514 // CharSequence
	nparams 2
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new character sequence that is a subsequence of this sequence.

<p> An invocation of this method of the form

<blockquote><pre>
str.subSequence(begin,&nbsp;end)</pre></blockquote>

behaves in exactly the same way as the invocation

<blockquote><pre>
str.substring(begin,&nbsp;end)</pre></blockquote>

This method is defined so that the <tt>String</tt> class can implement
the {@link CharSequence} interface. </p>

@param      beginIndex   the begin index, inclusive.
@param      endIndex     the end index, exclusive.
@return     the specified subsequence.

@throws  IndexOutOfBoundsException
         if <tt>beginIndex</tt> or <tt>endIndex</tt> are negative,
         if <tt>endIndex</tt> is greater than <tt>length()</tt>,
         or if <tt>beginIndex</tt> is greater than <tt>startIndex</tt>

@since 1.4
@spec JSR-51"
      end

      operation 135938 "concat"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Concatenates the specified string to the end of this string.
<p>
If the length of the argument string is <code>0</code>, then this
<code>String</code> object is returned. Otherwise, a new
<code>String</code> object is created, representing a character
sequence that is the concatenation of the character sequence
represented by this <code>String</code> object and the character
sequence represented by the argument string.<p>
Examples:
<blockquote><pre>
\"cares\".concat(\"s\") returns \"caress\"
\"to\".concat(\"get\").concat(\"her\") returns \"together\"
</pre></blockquote>

@param   str   the <code>String</code> that is concatenated to the end
               of this <code>String</code>.
@return  a string that represents the concatenation of this object's
         characters followed by the string argument's characters."
      end

      operation 136066 "replace"
	public return_type class_ref 128130 // String
	nparams 2
	  param in name "oldChar" explicit_type "char"
	  param in name "newChar" explicit_type "char"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new string resulting from replacing all occurrences of
<code>oldChar</code> in this string with <code>newChar</code>.
<p>
If the character <code>oldChar</code> does not occur in the
character sequence represented by this <code>String</code> object,
then a reference to this <code>String</code> object is returned.
Otherwise, a new <code>String</code> object is created that
represents a character sequence identical to the character sequence
represented by this <code>String</code> object, except that every
occurrence of <code>oldChar</code> is replaced by an occurrence
of <code>newChar</code>.
<p>
Examples:
<blockquote><pre>
\"mesquite in your cellar\".replace('e', 'o')
        returns \"mosquito in your collar\"
\"the war of baronets\".replace('r', 'y')
        returns \"the way of bayonets\"
\"sparring with a purple porpoise\".replace('p', 't')
        returns \"starring with a turtle tortoise\"
\"JonL\".replace('q', 'x') returns \"JonL\" (no change)
</pre></blockquote>

@param   oldChar   the old character.
@param   newChar   the new character.
@return  a string derived from this string by replacing every
         occurrence of <code>oldChar</code> with <code>newChar</code>."
      end

      operation 136194 "matches"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "regex" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this string matches the given <a
href=\"../util/regex/Pattern.html#sum\">regular expression</a>.

<p> An invocation of this method of the form
<i>str</i><tt>.matches(</tt><i>regex</i><tt>)</tt> yields exactly the
same result as the expression

<blockquote><tt> {@link java.util.regex.Pattern}.{@link
java.util.regex.Pattern#matches(String,CharSequence)
matches}(</tt><i>regex</i><tt>,</tt> <i>str</i><tt>)</tt></blockquote>

@param   regex
         the regular expression to which this string is to be matched

@return  <tt>true</tt> if, and only if, this string matches the
         given regular expression

@throws  PatternSyntaxException
         if the regular expression's syntax is invalid

@see java.util.regex.Pattern

@since 1.4
@spec JSR-51"
      end

      operation 136322 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "s" type class_ref 128514 // CharSequence
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if and only if this string contains the specified
sequence of char values.

@param s the sequence to search for
@return true if this string contains <code>s</code>, false otherwise
@throws NullPointerException if <code>s</code> is <code>null</code>
@since 1.5"
      end

      operation 136450 "replaceFirst"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "regex" type class_ref 128130 // String
	  param inout name "replacement" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the first substring of this string that matches the given <a
href=\"../util/regex/Pattern.html#sum\">regular expression</a> with the
given replacement.

<p> An invocation of this method of the form
<i>str</i><tt>.replaceFirst(</tt><i>regex</i><tt>,</tt> <i>repl</i><tt>)</tt>
yields exactly the same result as the expression

<blockquote><tt>
{@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile
compile}(</tt><i>regex</i><tt>).{@link
java.util.regex.Pattern#matcher(java.lang.CharSequence)
matcher}(</tt><i>str</i><tt>).{@link java.util.regex.Matcher#replaceFirst
replaceFirst}(</tt><i>repl</i><tt>)</tt></blockquote>

<p>
Note that backslashes (<tt>\\</tt>) and dollar signs (<tt>$</tt>) in the
replacement string may cause the results to be different than if it were
being treated as a literal replacement string; see
{@link java.util.regex.Matcher#replaceFirst}.
Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special
meaning of these characters, if desired.

@param   regex
         the regular expression to which this string is to be matched
@param   replacement
         the string to be substituted for the first match

@return  The resulting <tt>String</tt>

@throws  PatternSyntaxException
         if the regular expression's syntax is invalid

@see java.util.regex.Pattern

@since 1.4
@spec JSR-51"
      end

      operation 136578 "replaceAll"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "regex" type class_ref 128130 // String
	  param inout name "replacement" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces each substring of this string that matches the given <a
href=\"../util/regex/Pattern.html#sum\">regular expression</a> with the
given replacement.

<p> An invocation of this method of the form
<i>str</i><tt>.replaceAll(</tt><i>regex</i><tt>,</tt> <i>repl</i><tt>)</tt>
yields exactly the same result as the expression

<blockquote><tt>
{@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile
compile}(</tt><i>regex</i><tt>).{@link
java.util.regex.Pattern#matcher(java.lang.CharSequence)
matcher}(</tt><i>str</i><tt>).{@link java.util.regex.Matcher#replaceAll
replaceAll}(</tt><i>repl</i><tt>)</tt></blockquote>

<p>
Note that backslashes (<tt>\\</tt>) and dollar signs (<tt>$</tt>) in the
replacement string may cause the results to be different than if it were
being treated as a literal replacement string; see
{@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.
Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special
meaning of these characters, if desired.

@param   regex
         the regular expression to which this string is to be matched
@param   replacement
         the string to be substituted for each match

@return  The resulting <tt>String</tt>

@throws  PatternSyntaxException
         if the regular expression's syntax is invalid

@see java.util.regex.Pattern

@since 1.4
@spec JSR-51"
      end

      operation 136706 "replace"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "target" type class_ref 128514 // CharSequence
	  param inout name "replacement" type class_ref 128514 // CharSequence
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces each substring of this string that matches the literal target
sequence with the specified literal replacement sequence. The
replacement proceeds from the beginning of the string to the end, for
example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in
\"ba\" rather than \"ab\".

@param  target The sequence of char values to be replaced
@param  replacement The replacement sequence of char values
@return  The resulting string
@throws NullPointerException if <code>target</code> or
        <code>replacement</code> is <code>null</code>.
@since 1.5"
      end

      operation 136834 "split"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "regex" type class_ref 128130 // String
	  param in name "limit" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Splits this string around matches of the given
<a href=\"../util/regex/Pattern.html#sum\">regular expression</a>.

<p> The array returned by this method contains each substring of this
string that is terminated by another substring that matches the given
expression or is terminated by the end of the string.  The substrings in
the array are in the order in which they occur in this string.  If the
expression does not match any part of the input then the resulting array
has just one element, namely this string.

<p> The <tt>limit</tt> parameter controls the number of times the
pattern is applied and therefore affects the length of the resulting
array.  If the limit <i>n</i> is greater than zero then the pattern
will be applied at most <i>n</i>&nbsp;-&nbsp;1 times, the array's
length will be no greater than <i>n</i>, and the array's last entry
will contain all input beyond the last matched delimiter.  If <i>n</i>
is non-positive then the pattern will be applied as many times as
possible and the array can have any length.  If <i>n</i> is zero then
the pattern will be applied as many times as possible, the array can
have any length, and trailing empty strings will be discarded.

<p> The string <tt>\"boo:and:foo\"</tt>, for example, yields the
following results with these parameters:

<blockquote><table cellpadding=1 cellspacing=0 summary=\"Split example showing regex, limit, and result\">
<tr>
    <th>Regex</th>
    <th>Limit</th>
    <th>Result</th>
</tr>
<tr><td align=center>:</td>
    <td align=center>2</td>
    <td><tt>{ \"boo\", \"and:foo\" }</tt></td></tr>
<tr><td align=center>:</td>
    <td align=center>5</td>
    <td><tt>{ \"boo\", \"and\", \"foo\" }</tt></td></tr>
<tr><td align=center>:</td>
    <td align=center>-2</td>
    <td><tt>{ \"boo\", \"and\", \"foo\" }</tt></td></tr>
<tr><td align=center>o</td>
    <td align=center>5</td>
    <td><tt>{ \"b\", \"\", \":and:f\", \"\", \"\" }</tt></td></tr>
<tr><td align=center>o</td>
    <td align=center>-2</td>
    <td><tt>{ \"b\", \"\", \":and:f\", \"\", \"\" }</tt></td></tr>
<tr><td align=center>o</td>
    <td align=center>0</td>
    <td><tt>{ \"b\", \"\", \":and:f\" }</tt></td></tr>
</table></blockquote>

<p> An invocation of this method of the form
<i>str.</i><tt>split(</tt><i>regex</i><tt>,</tt>&nbsp;<i>n</i><tt>)</tt>
yields the same result as the expression

<blockquote>
{@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile
compile}<tt>(</tt><i>regex</i><tt>)</tt>.{@link
java.util.regex.Pattern#split(java.lang.CharSequence,int)
split}<tt>(</tt><i>str</i><tt>,</tt>&nbsp;<i>n</i><tt>)</tt>
</blockquote>


@param  regex
        the delimiting regular expression

@param  limit
        the result threshold, as described above

@return  the array of strings computed by splitting this string
         around matches of the given regular expression

@throws  PatternSyntaxException
         if the regular expression's syntax is invalid

@see java.util.regex.Pattern

@since 1.4
@spec JSR-51"
      end

      operation 136962 "split"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "regex" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Splits this string around matches of the given <a
href=\"../util/regex/Pattern.html#sum\">regular expression</a>.

<p> This method works as if by invoking the two-argument {@link
#split(String, int) split} method with the given expression and a limit
argument of zero.  Trailing empty strings are therefore not included in
the resulting array.

<p> The string <tt>\"boo:and:foo\"</tt>, for example, yields the following
results with these expressions:

<blockquote><table cellpadding=1 cellspacing=0 summary=\"Split examples showing regex and result\">
<tr>
 <th>Regex</th>
 <th>Result</th>
</tr>
<tr><td align=center>:</td>
    <td><tt>{ \"boo\", \"and\", \"foo\" }</tt></td></tr>
<tr><td align=center>o</td>
    <td><tt>{ \"b\", \"\", \":and:f\" }</tt></td></tr>
</table></blockquote>


@param  regex
        the delimiting regular expression

@return  the array of strings computed by splitting this string
         around matches of the given regular expression

@throws  PatternSyntaxException
         if the regular expression's syntax is invalid

@see java.util.regex.Pattern

@since 1.4
@spec JSR-51"
      end

      operation 137090 "toLowerCase"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "locale" type class_ref 129666 // Locale
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts all of the characters in this <code>String</code> to lower
case using the rules of the given <code>Locale</code>.  Case mapping is based
on the Unicode Standard version specified by the {@link java.lang.Character Character}
class. Since case mappings are not always 1:1 char mappings, the resulting
<code>String</code> may be a different length than the original <code>String</code>.
<p>
Examples of lowercase  mappings are in the following table:
<table border=\"1\" summary=\"Lowercase mapping examples showing language code of locale, upper case, lower case, and description\">
<tr>
  <th>Language Code of Locale</th>
  <th>Upper Case</th>
  <th>Lower Case</th>
  <th>Description</th>
</tr>
<tr>
  <td>tr (Turkish)</td>
  <td>&#92;u0130</td>
  <td>&#92;u0069</td>
  <td>capital letter I with dot above -&gt; small letter i</td>
</tr>
<tr>
  <td>tr (Turkish)</td>
  <td>&#92;u0049</td>
  <td>&#92;u0131</td>
  <td>capital letter I -&gt; small letter dotless i </td>
</tr>
<tr>
  <td>(all)</td>
  <td>French Fries</td>
  <td>french fries</td>
  <td>lowercased all chars in String</td>
</tr>
<tr>
  <td>(all)</td>
  <td><img src=\"doc-files/capiota.gif\" alt=\"capiota\"><img src=\"doc-files/capchi.gif\" alt=\"capchi\">
      <img src=\"doc-files/captheta.gif\" alt=\"captheta\"><img src=\"doc-files/capupsil.gif\" alt=\"capupsil\">
      <img src=\"doc-files/capsigma.gif\" alt=\"capsigma\"></td>
  <td><img src=\"doc-files/iota.gif\" alt=\"iota\"><img src=\"doc-files/chi.gif\" alt=\"chi\">
      <img src=\"doc-files/theta.gif\" alt=\"theta\"><img src=\"doc-files/upsilon.gif\" alt=\"upsilon\">
      <img src=\"doc-files/sigma1.gif\" alt=\"sigma\"></td>
  <td>lowercased all chars in String</td>
</tr>
</table>

@param locale use the case transformation rules for this locale
@return the <code>String</code>, converted to lowercase.
@see     java.lang.String#toLowerCase()
@see     java.lang.String#toUpperCase()
@see     java.lang.String#toUpperCase(Locale)
@since   1.1"
      end

      operation 137218 "toLowerCase"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts all of the characters in this <code>String</code> to lower
case using the rules of the default locale. This is equivalent to calling
<code>toLowerCase(Locale.getDefault())</code>.
<p>
<b>Note:</b> This method is locale sensitive, and may produce unexpected
results if used for strings that are intended to be interpreted locale
independently.
Examples are programming language identifiers, protocol keys, and HTML
tags.
For instance, <code>\"TITLE\".toLowerCase()</code> in a Turkish locale
returns <code>\"t\\u005Cu0131tle\"</code>, where '\\u005Cu0131' is the
LATIN SMALL LETTER DOTLESS I character.
To obtain correct results for locale insensitive strings, use
<code>toLowerCase(Locale.ENGLISH)</code>.
<p>
@return  the <code>String</code>, converted to lowercase.
@see     java.lang.String#toLowerCase(Locale)"
      end

      operation 137346 "toUpperCase"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "locale" type class_ref 129666 // Locale
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts all of the characters in this <code>String</code> to upper
case using the rules of the given <code>Locale</code>. Case mapping is based
on the Unicode Standard version specified by the {@link java.lang.Character Character}
class. Since case mappings are not always 1:1 char mappings, the resulting
<code>String</code> may be a different length than the original <code>String</code>.
<p>
Examples of locale-sensitive and 1:M case mappings are in the following table.
<p>
<table border=\"1\" summary=\"Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\">
<tr>
  <th>Language Code of Locale</th>
  <th>Lower Case</th>
  <th>Upper Case</th>
  <th>Description</th>
</tr>
<tr>
  <td>tr (Turkish)</td>
  <td>&#92;u0069</td>
  <td>&#92;u0130</td>
  <td>small letter i -&gt; capital letter I with dot above</td>
</tr>
<tr>
  <td>tr (Turkish)</td>
  <td>&#92;u0131</td>
  <td>&#92;u0049</td>
  <td>small letter dotless i -&gt; capital letter I</td>
</tr>
<tr>
  <td>(all)</td>
  <td>&#92;u00df</td>
  <td>&#92;u0053 &#92;u0053</td>
  <td>small letter sharp s -&gt; two letters: SS</td>
</tr>
<tr>
  <td>(all)</td>
  <td>Fahrvergn&uuml;gen</td>
  <td>FAHRVERGN&Uuml;GEN</td>
  <td></td>
</tr>
</table>
@param locale use the case transformation rules for this locale
@return the <code>String</code>, converted to uppercase.
@see     java.lang.String#toUpperCase()
@see     java.lang.String#toLowerCase()
@see     java.lang.String#toLowerCase(Locale)
@since   1.1"
      end

      operation 137474 "toUpperCase"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts all of the characters in this <code>String</code> to upper
case using the rules of the default locale. This method is equivalent to
<code>toUpperCase(Locale.getDefault())</code>.
<p>
<b>Note:</b> This method is locale sensitive, and may produce unexpected
results if used for strings that are intended to be interpreted locale
independently.
Examples are programming language identifiers, protocol keys, and HTML
tags.
For instance, <code>\"title\".toUpperCase()</code> in a Turkish locale
returns <code>\"T\\u005Cu0130TLE\"</code>, where '\\u005Cu0130' is the
LATIN CAPITAL LETTER I WITH DOT ABOVE character.
To obtain correct results for locale insensitive strings, use
<code>toUpperCase(Locale.ENGLISH)</code>.
<p>
@return  the <code>String</code>, converted to uppercase.
@see     java.lang.String#toUpperCase(Locale)"
      end

      operation 137602 "trim"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the string, with leading and trailing whitespace
omitted.
<p>
If this <code>String</code> object represents an empty character
sequence, or the first and last characters of character sequence
represented by this <code>String</code> object both have codes
greater than <code>'&#92;u0020'</code> (the space character), then a
reference to this <code>String</code> object is returned.
<p>
Otherwise, if there is no character with a code greater than
<code>'&#92;u0020'</code> in the string, then a new
<code>String</code> object representing an empty string is created
and returned.
<p>
Otherwise, let <i>k</i> be the index of the first character in the
string whose code is greater than <code>'&#92;u0020'</code>, and let
<i>m</i> be the index of the last character in the string whose code
is greater than <code>'&#92;u0020'</code>. A new <code>String</code>
object is created, representing the substring of this string that
begins with the character at index <i>k</i> and ends with the
character at index <i>m</i>-that is, the result of
<code>this.substring(<i>k</i>,&nbsp;<i>m</i>+1)</code>.
<p>
This method may be used to trim whitespace (as defined above) from
the beginning and end of a string.

@return  A copy of this string with leading and trailing white
         space removed, or this string if it has no leading or
         trailing white space."
      end

      operation 137730 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This object (which is already a string!) is itself returned.

@return  the string itself."
      end

      operation 137858 "toCharArray"
	public explicit_return_type "char"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this string to a new character array.

@return  a newly allocated character array whose length is the length
         of this string and whose contents are initialized to contain
         the character sequence represented by this string."
      end

      operation 137986 "format"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "format" type class_ref 128130 // String
	  param inout name "args" type class_ref 129282 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string using the specified format string and
arguments.

<p> The locale always used is the one returned by {@link
java.util.Locale#getDefault() Locale.getDefault()}.

@param  format
        A <a href=\"../util/Formatter.html#syntax\">format string</a>

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        <cite>The Java&trade; Virtual Machine Specification</cite>.
        The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  A formatted string

@see  java.util.Formatter
@since  1.5"
      end

      operation 138114 "format"
	class_operation public return_type class_ref 128130 // String
	nparams 3
	  param inout name "l" type class_ref 129666 // Locale
	  param inout name "format" type class_ref 128130 // String
	  param inout name "args" type class_ref 129282 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string using the specified locale, format string,
and arguments.

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied.

@param  format
        A <a href=\"../util/Formatter.html#syntax\">format string</a>

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        <cite>The Java&trade; Virtual Machine Specification</cite>.
        The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification

@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  A formatted string

@see  java.util.Formatter
@since  1.5"
      end

      operation 138242 "valueOf"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "obj" type class_ref 129282 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>Object</code> argument.

@param   obj   an <code>Object</code>.
@return  if the argument is <code>null</code>, then a string equal to
         <code>\"null\"</code>; otherwise, the value of
         <code>obj.toString()</code> is returned.
@see     java.lang.Object#toString()"
      end

      operation 138370 "valueOf"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "data" explicit_type "char"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>char</code> array
argument. The contents of the character array are copied; subsequent
modification of the character array does not affect the newly
created string.

@param   data   a <code>char</code> array.
@return  a newly allocated string representing the same sequence of
         characters contained in the character array argument."
      end

      operation 138498 "valueOf"
	class_operation public return_type class_ref 128130 // String
	nparams 3
	  param inout name "data" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of a specific subarray of the
<code>char</code> array argument.
<p>
The <code>offset</code> argument is the index of the first
character of the subarray. The <code>count</code> argument
specifies the length of the subarray. The contents of the subarray
are copied; subsequent modification of the character array does not
affect the newly created string.

@param   data     the character array.
@param   offset   the initial offset into the value of the
                 <code>String</code>.
@param   count    the length of the value of the <code>String</code>.
@return  a string representing the sequence of characters contained
         in the subarray of the character array argument.
@exception IndexOutOfBoundsException if <code>offset</code> is
         negative, or <code>count</code> is negative, or
         <code>offset+count</code> is larger than
         <code>data.length</code>."
      end

      operation 138626 "copyValueOf"
	class_operation public return_type class_ref 128130 // String
	nparams 3
	  param inout name "data" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String that represents the character sequence in the
array specified.

@param   data     the character array.
@param   offset   initial offset of the subarray.
@param   count    length of the subarray.
@return  a <code>String</code> that contains the characters of the
         specified subarray of the character array."
      end

      operation 138754 "copyValueOf"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "data" explicit_type "char"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String that represents the character sequence in the
array specified.

@param   data   the character array.
@return  a <code>String</code> that contains the characters of the
         character array."
      end

      operation 138882 "valueOf"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>boolean</code> argument.

@param   b   a <code>boolean</code>.
@return  if the argument is <code>true</code>, a string equal to
         <code>\"true\"</code> is returned; otherwise, a string equal to
         <code>\"false\"</code> is returned."
      end

      operation 139010 "valueOf"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "c" explicit_type "char"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>char</code>
argument.

@param   c   a <code>char</code>.
@return  a string of length <code>1</code> containing
         as its single character the argument <code>c</code>."
      end

      operation 139138 "valueOf"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "i" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>int</code> argument.
<p>
The representation is exactly the one returned by the
<code>Integer.toString</code> method of one argument.

@param   i   an <code>int</code>.
@return  a string representation of the <code>int</code> argument.
@see     java.lang.Integer#toString(int, int)"
      end

      operation 139266 "valueOf"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "l" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>long</code> argument.
<p>
The representation is exactly the one returned by the
<code>Long.toString</code> method of one argument.

@param   l   a <code>long</code>.
@return  a string representation of the <code>long</code> argument.
@see     java.lang.Long#toString(long)"
      end

      operation 139394 "valueOf"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "f" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>float</code> argument.
<p>
The representation is exactly the one returned by the
<code>Float.toString</code> method of one argument.

@param   f   a <code>float</code>.
@return  a string representation of the <code>float</code> argument.
@see     java.lang.Float#toString(float)"
      end

      operation 139522 "valueOf"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "d" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>double</code> argument.
<p>
The representation is exactly the one returned by the
<code>Double.toString</code> method of one argument.

@param   d   a <code>double</code>.
@return  a  string representation of the <code>double</code> argument.
@see     java.lang.Double#toString(double)"
      end

      operation 139650 "intern"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
"
	
	
	
	comment "Returns a canonical representation for the string object.
<p>
A pool of strings, initially empty, is maintained privately by the
class <code>String</code>.
<p>
When the intern method is invoked, if the pool already contains a
string equal to this <code>String</code> object as determined by
the {@link #equals(Object)} method, then the string from the pool is
returned. Otherwise, this <code>String</code> object is added to the
pool and a reference to this <code>String</code> object is returned.
<p>
It follows that for any two strings <code>s</code> and <code>t</code>,
<code>s.intern()&nbsp;==&nbsp;t.intern()</code> is <code>true</code>
if and only if <code>s.equals(t)</code> is <code>true</code>.
<p>
All literal strings and string-valued constant expressions are
interned. String literals are defined in section 3.10.5 of the
<cite>The Java&trade; Language Specification</cite>.

@return  a string that has the same contents as this string, but is
         guaranteed to be from a pool of unique strings."
      end
    end

    class 128386 "Comparable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface imposes a total ordering on the objects of each class that
implements it.  This ordering is referred to as the class's <i>natural
ordering</i>, and the class's <tt>compareTo</tt> method is referred to as
its <i>natural comparison method</i>.<p>

Lists (and arrays) of objects that implement this interface can be sorted
automatically by {@link Collections#sort(List) Collections.sort} (and
{@link Arrays#sort(Object[]) Arrays.sort}).  Objects that implement this
interface can be used as keys in a {@linkplain SortedMap sorted map} or as
elements in a {@linkplain SortedSet sorted set}, without the need to
specify a {@linkplain Comparator comparator}.<p>

The natural ordering for a class <tt>C</tt> is said to be <i>consistent
with equals</i> if and only if <tt>e1.compareTo(e2) == 0</tt> has
the same boolean value as <tt>e1.equals(e2)</tt> for every
<tt>e1</tt> and <tt>e2</tt> of class <tt>C</tt>.  Note that <tt>null</tt>
is not an instance of any class, and <tt>e.compareTo(null)</tt> should
throw a <tt>NullPointerException</tt> even though <tt>e.equals(null)</tt>
returns <tt>false</tt>.<p>

It is strongly recommended (though not required) that natural orderings be
consistent with equals.  This is so because sorted sets (and sorted maps)
without explicit comparators behave \"strangely\" when they are used with
elements (or keys) whose natural ordering is inconsistent with equals.  In
particular, such a sorted set (or sorted map) violates the general contract
for set (or map), which is defined in terms of the <tt>equals</tt>
method.<p>

For example, if one adds two keys <tt>a</tt> and <tt>b</tt> such that
<tt>(!a.equals(b) && a.compareTo(b) == 0)</tt> to a sorted
set that does not use an explicit comparator, the second <tt>add</tt>
operation returns false (and the size of the sorted set does not increase)
because <tt>a</tt> and <tt>b</tt> are equivalent from the sorted set's
perspective.<p>

Virtually all Java core classes that implement <tt>Comparable</tt> have natural
orderings that are consistent with equals.  One exception is
<tt>java.math.BigDecimal</tt>, whose natural ordering equates
<tt>BigDecimal</tt> objects with equal values and different precisions
(such as 4.0 and 4.00).<p>

For the mathematically inclined, the <i>relation</i> that defines
the natural ordering on a given class C is:<pre>
      {(x, y) such that x.compareTo(y) &lt;= 0}.
</pre> The <i>quotient</i> for this total order is: <pre>
      {(x, y) such that x.compareTo(y) == 0}.
</pre>

It follows immediately from the contract for <tt>compareTo</tt> that the
quotient is an <i>equivalence relation</i> on <tt>C</tt>, and that the
natural ordering is a <i>total order</i> on <tt>C</tt>.  When we say that a
class's natural ordering is <i>consistent with equals</i>, we mean that the
quotient for the natural ordering is the equivalence relation defined by
the class's {@link Object#equals(Object) equals(Object)} method:<pre>
    {(x, y) such that x.equals(y)}. </pre><p>

This interface is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@param <T> the type of objects that this object may be compared to

@author  Josh Bloch
@see java.util.Comparator
@since 1.2"
      operation 128002 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object with the specified object for order.  Returns a
negative integer, zero, or a positive integer as this object is less
than, equal to, or greater than the specified object.

<p>The implementor must ensure <tt>sgn(x.compareTo(y)) ==
-sgn(y.compareTo(x))</tt> for all <tt>x</tt> and <tt>y</tt>.  (This
implies that <tt>x.compareTo(y)</tt> must throw an exception iff
<tt>y.compareTo(x)</tt> throws an exception.)

<p>The implementor must also ensure that the relation is transitive:
<tt>(x.compareTo(y)&gt;0 &amp;&amp; y.compareTo(z)&gt;0)</tt> implies
<tt>x.compareTo(z)&gt;0</tt>.

<p>Finally, the implementor must ensure that <tt>x.compareTo(y)==0</tt>
implies that <tt>sgn(x.compareTo(z)) == sgn(y.compareTo(z))</tt>, for
all <tt>z</tt>.

<p>It is strongly recommended, but <i>not</i> strictly required that
<tt>(x.compareTo(y)==0) == (x.equals(y))</tt>.  Generally speaking, any
class that implements the <tt>Comparable</tt> interface and violates
this condition should clearly indicate this fact.  The recommended
language is \"Note: this class has a natural ordering that is
inconsistent with equals.\"

<p>In the foregoing description, the notation
<tt>sgn(</tt><i>expression</i><tt>)</tt> designates the mathematical
<i>signum</i> function, which is defined to return one of <tt>-1</tt>,
<tt>0</tt>, or <tt>1</tt> according to whether the value of
<i>expression</i> is negative, zero or positive.

@param   o the object to be compared.
@return  a negative integer, zero, or a positive integer as this object
         is less than, equal to, or greater than the specified object.

@throws NullPointerException if the specified object is null
@throws ClassCastException if the specified object's type prevents it
        from being compared to this object."
      end
    end

    class 128514 "CharSequence"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <tt>CharSequence</tt> is a readable sequence of <code>char</code> values. This
interface provides uniform, read-only access to many different kinds of
<code>char</code> sequences.
A <code>char</code> value represents a character in the <i>Basic
Multilingual Plane (BMP)</i> or a surrogate. Refer to <a
href=\"Character.html#unicode\">Unicode Character Representation</a> for details.

<p> This interface does not refine the general contracts of the {@link
java.lang.Object#equals(java.lang.Object) equals} and {@link
java.lang.Object#hashCode() hashCode} methods.  The result of comparing two
objects that implement <tt>CharSequence</tt> is therefore, in general,
undefined.  Each object may be implemented by a different class, and there
is no guarantee that each class will be capable of testing its instances
for equality with those of the other.  It is therefore inappropriate to use
arbitrary <tt>CharSequence</tt> instances as elements in a set or as keys in
a map. </p>

@author Mike McCloskey
@since 1.4
@spec JSR-51"
      operation 128130 "length"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of this character sequence.  The length is the number
of 16-bit <code>char</code>s in the sequence.</p>

@return  the number of <code>char</code>s in this sequence"
      end

      operation 128258 "charAt"
	public explicit_return_type "char"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>char</code> value at the specified index.  An index ranges from zero
to <tt>length() - 1</tt>.  The first <code>char</code> value of the sequence is at
index zero, the next at index one, and so on, as for array
indexing. </p>

<p>If the <code>char</code> value specified by the index is a
<a href=\"{@docRoot}/java/lang/Character.html#unicode\">surrogate</a>, the surrogate
value is returned.

@param   index   the index of the <code>char</code> value to be returned

@return  the specified <code>char</code> value

@throws  IndexOutOfBoundsException
         if the <tt>index</tt> argument is negative or not less than
         <tt>length()</tt>"
      end

      operation 128386 "subSequence"
	public return_type class_ref 128514 // CharSequence
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>CharSequence</code> that is a subsequence of this sequence.
The subsequence starts with the <code>char</code> value at the specified index and
ends with the <code>char</code> value at index <tt>end - 1</tt>.  The length
(in <code>char</code>s) of the
returned sequence is <tt>end - start</tt>, so if <tt>start == end</tt>
then an empty sequence is returned. </p>

@param   start   the start index, inclusive
@param   end     the end index, exclusive

@return  the specified subsequence

@throws  IndexOutOfBoundsException
         if <tt>start</tt> or <tt>end</tt> are negative,
         if <tt>end</tt> is greater than <tt>length()</tt>,
         or if <tt>start</tt> is greater than <tt>end</tt>"
      end

      operation 128514 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string containing the characters in this sequence in the same
order as this sequence.  The length of the string will be the length of
this sequence. </p>

@return  a string consisting of exactly this sequence of characters"
      end
    end

    class 129026 "StringBuffer"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 129154 "StringBuilder"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 129282 "Object"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 130690 "Cloneable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class implements the <code>Cloneable</code> interface to
indicate to the {@link java.lang.Object#clone()} method that it
is legal for that method to make a
field-for-field copy of instances of that class.
<p>
Invoking Object's clone method on an instance that does not implement the
<code>Cloneable</code> interface results in the exception
<code>CloneNotSupportedException</code> being thrown.
<p>
By convention, classes that implement this interface should override
<tt>Object.clone</tt> (which is protected) with a public method.
See {@link java.lang.Object#clone()} for details on overriding this
method.
<p>
Note that this interface does <i>not</i> contain the <tt>clone</tt> method.
Therefore, it is not possible to clone an object merely by virtue of the
fact that it implements this interface.  Even if the clone method is invoked
reflectively, there is no guarantee that it will succeed.

@author  unascribed
@see     java.lang.CloneNotSupportedException
@see     java.lang.Object#clone()
@since   JDK1.0"
    end
  end
end
